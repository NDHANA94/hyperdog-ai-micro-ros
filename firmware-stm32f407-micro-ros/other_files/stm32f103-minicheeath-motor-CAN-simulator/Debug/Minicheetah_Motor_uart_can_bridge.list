
Minicheetah_Motor_uart_can_bridge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fcc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080030d8  080030d8  000130d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030f8  080030f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080030f8  080030f8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030f8  080030f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030f8  080030f8  000130f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030fc  080030fc  000130fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003100  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  2000000c  0800310c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  0800310c  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008144  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ad2  00000000  00000000  00028179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000870  00000000  00000000  00029c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007a8  00000000  00000000  0002a4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c19  00000000  00000000  0002ac68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000084bb  00000000  00000000  00042881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000852f5  00000000  00000000  0004ad3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000049  00000000  00000000  000d0031  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002054  00000000  00000000  000d007c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080030c0 	.word	0x080030c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080030c0 	.word	0x080030c0

0800014c <MX_CAN_Init>:
uint8_t can_tx_data[NUM_CAN_TX_DATA];
uint32_t TxMailbox;

/* CAN init function */
void MX_CAN_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000150:	4b17      	ldr	r3, [pc, #92]	; (80001b0 <MX_CAN_Init+0x64>)
 8000152:	4a18      	ldr	r2, [pc, #96]	; (80001b4 <MX_CAN_Init+0x68>)
 8000154:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000156:	4b16      	ldr	r3, [pc, #88]	; (80001b0 <MX_CAN_Init+0x64>)
 8000158:	2204      	movs	r2, #4
 800015a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800015c:	4b14      	ldr	r3, [pc, #80]	; (80001b0 <MX_CAN_Init+0x64>)
 800015e:	2200      	movs	r2, #0
 8000160:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000162:	4b13      	ldr	r3, [pc, #76]	; (80001b0 <MX_CAN_Init+0x64>)
 8000164:	2200      	movs	r2, #0
 8000166:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_7TQ;
 8000168:	4b11      	ldr	r3, [pc, #68]	; (80001b0 <MX_CAN_Init+0x64>)
 800016a:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800016e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000170:	4b0f      	ldr	r3, [pc, #60]	; (80001b0 <MX_CAN_Init+0x64>)
 8000172:	2200      	movs	r2, #0
 8000174:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000176:	4b0e      	ldr	r3, [pc, #56]	; (80001b0 <MX_CAN_Init+0x64>)
 8000178:	2200      	movs	r2, #0
 800017a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800017c:	4b0c      	ldr	r3, [pc, #48]	; (80001b0 <MX_CAN_Init+0x64>)
 800017e:	2200      	movs	r2, #0
 8000180:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000182:	4b0b      	ldr	r3, [pc, #44]	; (80001b0 <MX_CAN_Init+0x64>)
 8000184:	2200      	movs	r2, #0
 8000186:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000188:	4b09      	ldr	r3, [pc, #36]	; (80001b0 <MX_CAN_Init+0x64>)
 800018a:	2200      	movs	r2, #0
 800018c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800018e:	4b08      	ldr	r3, [pc, #32]	; (80001b0 <MX_CAN_Init+0x64>)
 8000190:	2200      	movs	r2, #0
 8000192:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000194:	4b06      	ldr	r3, [pc, #24]	; (80001b0 <MX_CAN_Init+0x64>)
 8000196:	2200      	movs	r2, #0
 8000198:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800019a:	4805      	ldr	r0, [pc, #20]	; (80001b0 <MX_CAN_Init+0x64>)
 800019c:	f000 fb14 	bl	80007c8 <HAL_CAN_Init>
 80001a0:	4603      	mov	r3, r0
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d001      	beq.n	80001aa <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 80001a6:	f000 f962 	bl	800046e <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	20000028 	.word	0x20000028
 80001b4:	40006400 	.word	0x40006400

080001b8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b088      	sub	sp, #32
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001c0:	f107 0310 	add.w	r3, r7, #16
 80001c4:	2200      	movs	r2, #0
 80001c6:	601a      	str	r2, [r3, #0]
 80001c8:	605a      	str	r2, [r3, #4]
 80001ca:	609a      	str	r2, [r3, #8]
 80001cc:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a20      	ldr	r2, [pc, #128]	; (8000254 <HAL_CAN_MspInit+0x9c>)
 80001d4:	4293      	cmp	r3, r2
 80001d6:	d139      	bne.n	800024c <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80001d8:	4b1f      	ldr	r3, [pc, #124]	; (8000258 <HAL_CAN_MspInit+0xa0>)
 80001da:	69db      	ldr	r3, [r3, #28]
 80001dc:	4a1e      	ldr	r2, [pc, #120]	; (8000258 <HAL_CAN_MspInit+0xa0>)
 80001de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80001e2:	61d3      	str	r3, [r2, #28]
 80001e4:	4b1c      	ldr	r3, [pc, #112]	; (8000258 <HAL_CAN_MspInit+0xa0>)
 80001e6:	69db      	ldr	r3, [r3, #28]
 80001e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80001ec:	60fb      	str	r3, [r7, #12]
 80001ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80001f0:	4b19      	ldr	r3, [pc, #100]	; (8000258 <HAL_CAN_MspInit+0xa0>)
 80001f2:	699b      	ldr	r3, [r3, #24]
 80001f4:	4a18      	ldr	r2, [pc, #96]	; (8000258 <HAL_CAN_MspInit+0xa0>)
 80001f6:	f043 0304 	orr.w	r3, r3, #4
 80001fa:	6193      	str	r3, [r2, #24]
 80001fc:	4b16      	ldr	r3, [pc, #88]	; (8000258 <HAL_CAN_MspInit+0xa0>)
 80001fe:	699b      	ldr	r3, [r3, #24]
 8000200:	f003 0304 	and.w	r3, r3, #4
 8000204:	60bb      	str	r3, [r7, #8]
 8000206:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000208:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800020c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800020e:	2300      	movs	r3, #0
 8000210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000212:	2300      	movs	r3, #0
 8000214:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000216:	f107 0310 	add.w	r3, r7, #16
 800021a:	4619      	mov	r1, r3
 800021c:	480f      	ldr	r0, [pc, #60]	; (800025c <HAL_CAN_MspInit+0xa4>)
 800021e:	f001 fc67 	bl	8001af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000222:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000226:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000228:	2302      	movs	r3, #2
 800022a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800022c:	2303      	movs	r3, #3
 800022e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000230:	f107 0310 	add.w	r3, r7, #16
 8000234:	4619      	mov	r1, r3
 8000236:	4809      	ldr	r0, [pc, #36]	; (800025c <HAL_CAN_MspInit+0xa4>)
 8000238:	f001 fc5a 	bl	8001af0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800023c:	2200      	movs	r2, #0
 800023e:	2100      	movs	r1, #0
 8000240:	2014      	movs	r0, #20
 8000242:	f001 f9dc 	bl	80015fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000246:	2014      	movs	r0, #20
 8000248:	f001 f9f5 	bl	8001636 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800024c:	bf00      	nop
 800024e:	3720      	adds	r7, #32
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	40006400 	.word	0x40006400
 8000258:	40021000 	.word	0x40021000
 800025c:	40010800 	.word	0x40010800

08000260 <can_rx_init>:
  }
}

/* USER CODE BEGIN 1 */

void can_rx_init(){
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
	can_filter.FilterFIFOAssignment=CAN_FILTER_FIFO0; 	// set fifo assignment
 8000264:	4b0e      	ldr	r3, [pc, #56]	; (80002a0 <can_rx_init+0x40>)
 8000266:	2200      	movs	r2, #0
 8000268:	611a      	str	r2, [r3, #16]
	can_filter.FilterIdHigh=1<<5; 				// CAN ID
 800026a:	4b0d      	ldr	r3, [pc, #52]	; (80002a0 <can_rx_init+0x40>)
 800026c:	2220      	movs	r2, #32
 800026e:	601a      	str	r2, [r3, #0]
	can_filter.FilterIdLow=0x0;
 8000270:	4b0b      	ldr	r3, [pc, #44]	; (80002a0 <can_rx_init+0x40>)
 8000272:	2200      	movs	r2, #0
 8000274:	605a      	str	r2, [r3, #4]
	can_filter.FilterMaskIdHigh=0;
 8000276:	4b0a      	ldr	r3, [pc, #40]	; (80002a0 <can_rx_init+0x40>)
 8000278:	2200      	movs	r2, #0
 800027a:	609a      	str	r2, [r3, #8]
	can_filter.FilterMaskIdLow=0;
 800027c:	4b08      	ldr	r3, [pc, #32]	; (80002a0 <can_rx_init+0x40>)
 800027e:	2200      	movs	r2, #0
 8000280:	60da      	str	r2, [r3, #12]
	can_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000282:	4b07      	ldr	r3, [pc, #28]	; (80002a0 <can_rx_init+0x40>)
 8000284:	2200      	movs	r2, #0
 8000286:	619a      	str	r2, [r3, #24]
	can_filter.FilterScale=CAN_FILTERSCALE_32BIT;
 8000288:	4b05      	ldr	r3, [pc, #20]	; (80002a0 <can_rx_init+0x40>)
 800028a:	2201      	movs	r2, #1
 800028c:	61da      	str	r2, [r3, #28]
	can_filter.FilterActivation=ENABLE;
 800028e:	4b04      	ldr	r3, [pc, #16]	; (80002a0 <can_rx_init+0x40>)
 8000290:	2201      	movs	r2, #1
 8000292:	621a      	str	r2, [r3, #32]
	HAL_CAN_ConfigFilter(&hcan, &can_filter);
 8000294:	4902      	ldr	r1, [pc, #8]	; (80002a0 <can_rx_init+0x40>)
 8000296:	4803      	ldr	r0, [pc, #12]	; (80002a4 <can_rx_init+0x44>)
 8000298:	f000 fb91 	bl	80009be <HAL_CAN_ConfigFilter>
}
 800029c:	bf00      	nop
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	20000084 	.word	0x20000084
 80002a4:	20000028 	.word	0x20000028

080002a8 <can_tx_init>:


void can_tx_init(){
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0
	tx_canHeader.DLC = NUM_CAN_TX_DATA; 			// message size of 8 byte
 80002ac:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <can_tx_init+0x20>)
 80002ae:	2206      	movs	r2, #6
 80002b0:	611a      	str	r2, [r3, #16]
	tx_canHeader.IDE=CAN_ID_STD; 		// set identifier to standard
 80002b2:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <can_tx_init+0x20>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	609a      	str	r2, [r3, #8]
	tx_canHeader.RTR=CAN_RTR_DATA; 	// set data type to remote transmission request?
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <can_tx_init+0x20>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	60da      	str	r2, [r3, #12]
}
 80002be:	bf00      	nop
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	2000006c 	.word	0x2000006c

080002cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002d2:	4b10      	ldr	r3, [pc, #64]	; (8000314 <MX_DMA_Init+0x48>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	4a0f      	ldr	r2, [pc, #60]	; (8000314 <MX_DMA_Init+0x48>)
 80002d8:	f043 0301 	orr.w	r3, r3, #1
 80002dc:	6153      	str	r3, [r2, #20]
 80002de:	4b0d      	ldr	r3, [pc, #52]	; (8000314 <MX_DMA_Init+0x48>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	f003 0301 	and.w	r3, r3, #1
 80002e6:	607b      	str	r3, [r7, #4]
 80002e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80002ea:	2200      	movs	r2, #0
 80002ec:	2100      	movs	r1, #0
 80002ee:	200e      	movs	r0, #14
 80002f0:	f001 f985 	bl	80015fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80002f4:	200e      	movs	r0, #14
 80002f6:	f001 f99e 	bl	8001636 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80002fa:	2200      	movs	r2, #0
 80002fc:	2100      	movs	r1, #0
 80002fe:	200f      	movs	r0, #15
 8000300:	f001 f97d 	bl	80015fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000304:	200f      	movs	r0, #15
 8000306:	f001 f996 	bl	8001636 <HAL_NVIC_EnableIRQ>

}
 800030a:	bf00      	nop
 800030c:	3708      	adds	r7, #8
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	40021000 	.word	0x40021000

08000318 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b088      	sub	sp, #32
 800031c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800031e:	f107 0310 	add.w	r3, r7, #16
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	605a      	str	r2, [r3, #4]
 8000328:	609a      	str	r2, [r3, #8]
 800032a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800032c:	4b1e      	ldr	r3, [pc, #120]	; (80003a8 <MX_GPIO_Init+0x90>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	4a1d      	ldr	r2, [pc, #116]	; (80003a8 <MX_GPIO_Init+0x90>)
 8000332:	f043 0310 	orr.w	r3, r3, #16
 8000336:	6193      	str	r3, [r2, #24]
 8000338:	4b1b      	ldr	r3, [pc, #108]	; (80003a8 <MX_GPIO_Init+0x90>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	f003 0310 	and.w	r3, r3, #16
 8000340:	60fb      	str	r3, [r7, #12]
 8000342:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000344:	4b18      	ldr	r3, [pc, #96]	; (80003a8 <MX_GPIO_Init+0x90>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	4a17      	ldr	r2, [pc, #92]	; (80003a8 <MX_GPIO_Init+0x90>)
 800034a:	f043 0320 	orr.w	r3, r3, #32
 800034e:	6193      	str	r3, [r2, #24]
 8000350:	4b15      	ldr	r3, [pc, #84]	; (80003a8 <MX_GPIO_Init+0x90>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	f003 0320 	and.w	r3, r3, #32
 8000358:	60bb      	str	r3, [r7, #8]
 800035a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800035c:	4b12      	ldr	r3, [pc, #72]	; (80003a8 <MX_GPIO_Init+0x90>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	4a11      	ldr	r2, [pc, #68]	; (80003a8 <MX_GPIO_Init+0x90>)
 8000362:	f043 0304 	orr.w	r3, r3, #4
 8000366:	6193      	str	r3, [r2, #24]
 8000368:	4b0f      	ldr	r3, [pc, #60]	; (80003a8 <MX_GPIO_Init+0x90>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	f003 0304 	and.w	r3, r3, #4
 8000370:	607b      	str	r3, [r7, #4]
 8000372:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000374:	2200      	movs	r2, #0
 8000376:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800037a:	480c      	ldr	r0, [pc, #48]	; (80003ac <MX_GPIO_Init+0x94>)
 800037c:	f001 fd3c 	bl	8001df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000380:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000384:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000386:	2301      	movs	r3, #1
 8000388:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038a:	2300      	movs	r3, #0
 800038c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800038e:	2302      	movs	r3, #2
 8000390:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000392:	f107 0310 	add.w	r3, r7, #16
 8000396:	4619      	mov	r1, r3
 8000398:	4804      	ldr	r0, [pc, #16]	; (80003ac <MX_GPIO_Init+0x94>)
 800039a:	f001 fba9 	bl	8001af0 <HAL_GPIO_Init>

}
 800039e:	bf00      	nop
 80003a0:	3720      	adds	r7, #32
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	40021000 	.word	0x40021000
 80003ac:	40011000 	.word	0x40011000

080003b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003b4:	f000 f9a6 	bl	8000704 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b8:	f000 f814 	bl	80003e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003bc:	f7ff ffac 	bl	8000318 <MX_GPIO_Init>
  MX_DMA_Init();
 80003c0:	f7ff ff84 	bl	80002cc <MX_DMA_Init>
  MX_CAN_Init();
 80003c4:	f7ff fec2 	bl	800014c <MX_CAN_Init>

  /* USER CODE BEGIN 2 */

  // Start_uart1_rx_DMA(); // ********

  can_tx_init();
 80003c8:	f7ff ff6e 	bl	80002a8 <can_tx_init>
  can_rx_init();
 80003cc:	f7ff ff48 	bl	8000260 <can_rx_init>

  HAL_CAN_Start(&hcan);
 80003d0:	4803      	ldr	r0, [pc, #12]	; (80003e0 <main+0x30>)
 80003d2:	f000 fbbd 	bl	8000b50 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80003d6:	2102      	movs	r1, #2
 80003d8:	4801      	ldr	r0, [pc, #4]	; (80003e0 <main+0x30>)
 80003da:	f000 fde8 	bl	8000fae <HAL_CAN_ActivateNotification>
  //HAL_Delay(500);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003de:	e7fe      	b.n	80003de <main+0x2e>
 80003e0:	20000028 	.word	0x20000028

080003e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b090      	sub	sp, #64	; 0x40
 80003e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ea:	f107 0318 	add.w	r3, r7, #24
 80003ee:	2228      	movs	r2, #40	; 0x28
 80003f0:	2100      	movs	r1, #0
 80003f2:	4618      	mov	r0, r3
 80003f4:	f002 fe5c 	bl	80030b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	605a      	str	r2, [r3, #4]
 8000400:	609a      	str	r2, [r3, #8]
 8000402:	60da      	str	r2, [r3, #12]
 8000404:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000406:	2301      	movs	r3, #1
 8000408:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800040a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800040e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000410:	2300      	movs	r3, #0
 8000412:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000414:	2301      	movs	r3, #1
 8000416:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000418:	2302      	movs	r3, #2
 800041a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800041c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000420:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000422:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000426:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000428:	f107 0318 	add.w	r3, r7, #24
 800042c:	4618      	mov	r0, r3
 800042e:	f001 fd15 	bl	8001e5c <HAL_RCC_OscConfig>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000438:	f000 f819 	bl	800046e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800043c:	230f      	movs	r3, #15
 800043e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000440:	2302      	movs	r3, #2
 8000442:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000444:	2300      	movs	r3, #0
 8000446:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000448:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800044c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800044e:	2300      	movs	r3, #0
 8000450:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	2102      	movs	r1, #2
 8000456:	4618      	mov	r0, r3
 8000458:	f001 ff82 	bl	8002360 <HAL_RCC_ClockConfig>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000462:	f000 f804 	bl	800046e <Error_Handler>
  }
}
 8000466:	bf00      	nop
 8000468:	3740      	adds	r7, #64	; 0x40
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}

0800046e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800046e:	b480      	push	{r7}
 8000470:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000472:	b672      	cpsid	i
}
 8000474:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000476:	e7fe      	b.n	8000476 <Error_Handler+0x8>

08000478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000478:	b480      	push	{r7}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800047e:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <HAL_MspInit+0x5c>)
 8000480:	699b      	ldr	r3, [r3, #24]
 8000482:	4a14      	ldr	r2, [pc, #80]	; (80004d4 <HAL_MspInit+0x5c>)
 8000484:	f043 0301 	orr.w	r3, r3, #1
 8000488:	6193      	str	r3, [r2, #24]
 800048a:	4b12      	ldr	r3, [pc, #72]	; (80004d4 <HAL_MspInit+0x5c>)
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	f003 0301 	and.w	r3, r3, #1
 8000492:	60bb      	str	r3, [r7, #8]
 8000494:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000496:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <HAL_MspInit+0x5c>)
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	4a0e      	ldr	r2, [pc, #56]	; (80004d4 <HAL_MspInit+0x5c>)
 800049c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004a0:	61d3      	str	r3, [r2, #28]
 80004a2:	4b0c      	ldr	r3, [pc, #48]	; (80004d4 <HAL_MspInit+0x5c>)
 80004a4:	69db      	ldr	r3, [r3, #28]
 80004a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004aa:	607b      	str	r3, [r7, #4]
 80004ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004ae:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <HAL_MspInit+0x60>)
 80004b0:	685b      	ldr	r3, [r3, #4]
 80004b2:	60fb      	str	r3, [r7, #12]
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004ba:	60fb      	str	r3, [r7, #12]
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004c2:	60fb      	str	r3, [r7, #12]
 80004c4:	4a04      	ldr	r2, [pc, #16]	; (80004d8 <HAL_MspInit+0x60>)
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ca:	bf00      	nop
 80004cc:	3714      	adds	r7, #20
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr
 80004d4:	40021000 	.word	0x40021000
 80004d8:	40010000 	.word	0x40010000

080004dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <NMI_Handler+0x4>

080004e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004e2:	b480      	push	{r7}
 80004e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004e6:	e7fe      	b.n	80004e6 <HardFault_Handler+0x4>

080004e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004ec:	e7fe      	b.n	80004ec <MemManage_Handler+0x4>

080004ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004f2:	e7fe      	b.n	80004f2 <BusFault_Handler+0x4>

080004f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004f8:	e7fe      	b.n	80004f8 <UsageFault_Handler+0x4>

080004fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004fe:	bf00      	nop
 8000500:	46bd      	mov	sp, r7
 8000502:	bc80      	pop	{r7}
 8000504:	4770      	bx	lr

08000506 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000506:	b480      	push	{r7}
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800050a:	bf00      	nop
 800050c:	46bd      	mov	sp, r7
 800050e:	bc80      	pop	{r7}
 8000510:	4770      	bx	lr

08000512 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000512:	b480      	push	{r7}
 8000514:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000516:	bf00      	nop
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr

0800051e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800051e:	b580      	push	{r7, lr}
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000522:	f000 f935 	bl	8000790 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}
	...

0800052c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000530:	4802      	ldr	r0, [pc, #8]	; (800053c <DMA1_Channel4_IRQHandler+0x10>)
 8000532:	f001 f9a9 	bl	8001888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20000110 	.word	0x20000110

08000540 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <DMA1_Channel5_IRQHandler+0x10>)
 8000546:	f001 f99f 	bl	8001888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800054a:	bf00      	nop
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	20000154 	.word	0x20000154

08000554 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800055a:	481b      	ldr	r0, [pc, #108]	; (80005c8 <USB_LP_CAN1_RX0_IRQHandler+0x74>)
 800055c:	f000 fd4c 	bl	8000ff8 <HAL_CAN_IRQHandler>

  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */
  HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &rx_canHeader, can_rx_data);
 8000560:	4b1a      	ldr	r3, [pc, #104]	; (80005cc <USB_LP_CAN1_RX0_IRQHandler+0x78>)
 8000562:	4a1b      	ldr	r2, [pc, #108]	; (80005d0 <USB_LP_CAN1_RX0_IRQHandler+0x7c>)
 8000564:	2100      	movs	r1, #0
 8000566:	4818      	ldr	r0, [pc, #96]	; (80005c8 <USB_LP_CAN1_RX0_IRQHandler+0x74>)
 8000568:	f000 fc10 	bl	8000d8c <HAL_CAN_GetRxMessage>
  can_tx_data[0] = rx_canHeader.StdId;
 800056c:	4b18      	ldr	r3, [pc, #96]	; (80005d0 <USB_LP_CAN1_RX0_IRQHandler+0x7c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	b2da      	uxtb	r2, r3
 8000572:	4b18      	ldr	r3, [pc, #96]	; (80005d4 <USB_LP_CAN1_RX0_IRQHandler+0x80>)
 8000574:	701a      	strb	r2, [r3, #0]
  for(int i=0; i< NUM_CAN_TX_DATA-1; i++){
 8000576:	2300      	movs	r3, #0
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	e00a      	b.n	8000592 <USB_LP_CAN1_RX0_IRQHandler+0x3e>
    can_tx_data[i+1] = can_rx_data[i];
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	3301      	adds	r3, #1
 8000580:	4912      	ldr	r1, [pc, #72]	; (80005cc <USB_LP_CAN1_RX0_IRQHandler+0x78>)
 8000582:	687a      	ldr	r2, [r7, #4]
 8000584:	440a      	add	r2, r1
 8000586:	7811      	ldrb	r1, [r2, #0]
 8000588:	4a12      	ldr	r2, [pc, #72]	; (80005d4 <USB_LP_CAN1_RX0_IRQHandler+0x80>)
 800058a:	54d1      	strb	r1, [r2, r3]
  for(int i=0; i< NUM_CAN_TX_DATA-1; i++){
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	3301      	adds	r3, #1
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	2b04      	cmp	r3, #4
 8000596:	ddf1      	ble.n	800057c <USB_LP_CAN1_RX0_IRQHandler+0x28>
  }
  tx_canHeader.StdId = 0;
 8000598:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <USB_LP_CAN1_RX0_IRQHandler+0x84>)
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
  if (HAL_CAN_AddTxMessage(&hcan, &tx_canHeader, can_tx_data, &TxMailbox) != HAL_OK)
 800059e:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <USB_LP_CAN1_RX0_IRQHandler+0x88>)
 80005a0:	4a0c      	ldr	r2, [pc, #48]	; (80005d4 <USB_LP_CAN1_RX0_IRQHandler+0x80>)
 80005a2:	490d      	ldr	r1, [pc, #52]	; (80005d8 <USB_LP_CAN1_RX0_IRQHandler+0x84>)
 80005a4:	4808      	ldr	r0, [pc, #32]	; (80005c8 <USB_LP_CAN1_RX0_IRQHandler+0x74>)
 80005a6:	f000 fb17 	bl	8000bd8 <HAL_CAN_AddTxMessage>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <USB_LP_CAN1_RX0_IRQHandler+0x60>
  {
    Error_Handler();
 80005b0:	f7ff ff5d 	bl	800046e <Error_Handler>
  }

  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80005b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005b8:	4809      	ldr	r0, [pc, #36]	; (80005e0 <USB_LP_CAN1_RX0_IRQHandler+0x8c>)
 80005ba:	f001 fc35 	bl	8001e28 <HAL_GPIO_TogglePin>

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000028 	.word	0x20000028
 80005cc:	200000ac 	.word	0x200000ac
 80005d0:	20000050 	.word	0x20000050
 80005d4:	200000b4 	.word	0x200000b4
 80005d8:	2000006c 	.word	0x2000006c
 80005dc:	200000bc 	.word	0x200000bc
 80005e0:	40011000 	.word	0x40011000

080005e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80005e8:	4802      	ldr	r0, [pc, #8]	; (80005f4 <USART1_IRQHandler+0x10>)
 80005ea:	f002 f8bb 	bl	8002764 <HAL_UART_IRQHandler>

  /* USER CODE BEGIN USART1_IRQn 1 */
  

  /* USER CODE END USART1_IRQn 1 */
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	200000cc 	.word	0x200000cc

080005f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr

08000604 <HAL_UART_RxCpltCallback>:
// }



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a16      	ldr	r2, [pc, #88]	; (800066c <HAL_UART_RxCpltCallback+0x68>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d121      	bne.n	800065a <HAL_UART_RxCpltCallback+0x56>
	{
    // HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
    tx_canHeader.StdId = uart1_rxBuf[0];
 8000616:	4b16      	ldr	r3, [pc, #88]	; (8000670 <HAL_UART_RxCpltCallback+0x6c>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	461a      	mov	r2, r3
 800061c:	4b15      	ldr	r3, [pc, #84]	; (8000674 <HAL_UART_RxCpltCallback+0x70>)
 800061e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i<8; i++){
 8000620:	2300      	movs	r3, #0
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	e00b      	b.n	800063e <HAL_UART_RxCpltCallback+0x3a>
      can_tx_data[i] = uart1_rxBuf[i+1];
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	3301      	adds	r3, #1
 800062a:	4a11      	ldr	r2, [pc, #68]	; (8000670 <HAL_UART_RxCpltCallback+0x6c>)
 800062c:	5cd1      	ldrb	r1, [r2, r3]
 800062e:	4a12      	ldr	r2, [pc, #72]	; (8000678 <HAL_UART_RxCpltCallback+0x74>)
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	4413      	add	r3, r2
 8000634:	460a      	mov	r2, r1
 8000636:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i<8; i++){
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	3301      	adds	r3, #1
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	2b07      	cmp	r3, #7
 8000642:	ddf0      	ble.n	8000626 <HAL_UART_RxCpltCallback+0x22>
    }
    if (HAL_CAN_AddTxMessage(&hcan, &tx_canHeader, can_tx_data, &TxMailbox) != HAL_OK)
 8000644:	4b0d      	ldr	r3, [pc, #52]	; (800067c <HAL_UART_RxCpltCallback+0x78>)
 8000646:	4a0c      	ldr	r2, [pc, #48]	; (8000678 <HAL_UART_RxCpltCallback+0x74>)
 8000648:	490a      	ldr	r1, [pc, #40]	; (8000674 <HAL_UART_RxCpltCallback+0x70>)
 800064a:	480d      	ldr	r0, [pc, #52]	; (8000680 <HAL_UART_RxCpltCallback+0x7c>)
 800064c:	f000 fac4 	bl	8000bd8 <HAL_CAN_AddTxMessage>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <HAL_UART_RxCpltCallback+0x56>
    {
      Error_Handler();
 8000656:	f7ff ff0a 	bl	800046e <Error_Handler>
    }
		// execute_rx_cmd();
    // HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
	}

	HAL_UART_Receive_DMA(&huart1, uart1_rxBuf, UART1_RX_BUFFER_SIZE);
 800065a:	2209      	movs	r2, #9
 800065c:	4904      	ldr	r1, [pc, #16]	; (8000670 <HAL_UART_RxCpltCallback+0x6c>)
 800065e:	4809      	ldr	r0, [pc, #36]	; (8000684 <HAL_UART_RxCpltCallback+0x80>)
 8000660:	f002 f850 	bl	8002704 <HAL_UART_Receive_DMA>
}
 8000664:	bf00      	nop
 8000666:	3710      	adds	r7, #16
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40013800 	.word	0x40013800
 8000670:	200000c0 	.word	0x200000c0
 8000674:	2000006c 	.word	0x2000006c
 8000678:	200000b4 	.word	0x200000b4
 800067c:	200000bc 	.word	0x200000bc
 8000680:	20000028 	.word	0x20000028
 8000684:	200000cc 	.word	0x200000cc

08000688 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a05      	ldr	r2, [pc, #20]	; (80006ac <HAL_UART_TxCpltCallback+0x24>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d104      	bne.n	80006a4 <HAL_UART_TxCpltCallback+0x1c>
	{
		HAL_UART_Transmit_DMA(&huart1, can_rx_data, 6);
 800069a:	2206      	movs	r2, #6
 800069c:	4904      	ldr	r1, [pc, #16]	; (80006b0 <HAL_UART_TxCpltCallback+0x28>)
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <HAL_UART_TxCpltCallback+0x2c>)
 80006a0:	f001 ffc4 	bl	800262c <HAL_UART_Transmit_DMA>
	}
}
 80006a4:	bf00      	nop
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40013800 	.word	0x40013800
 80006b0:	200000ac 	.word	0x200000ac
 80006b4:	200000cc 	.word	0x200000cc

080006b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b8:	480c      	ldr	r0, [pc, #48]	; (80006ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006ba:	490d      	ldr	r1, [pc, #52]	; (80006f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006bc:	4a0d      	ldr	r2, [pc, #52]	; (80006f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006c0:	e002      	b.n	80006c8 <LoopCopyDataInit>

080006c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006c6:	3304      	adds	r3, #4

080006c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006cc:	d3f9      	bcc.n	80006c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ce:	4a0a      	ldr	r2, [pc, #40]	; (80006f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006d0:	4c0a      	ldr	r4, [pc, #40]	; (80006fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80006d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d4:	e001      	b.n	80006da <LoopFillZerobss>

080006d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d8:	3204      	adds	r2, #4

080006da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006dc:	d3fb      	bcc.n	80006d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006de:	f7ff ff8b 	bl	80005f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006e2:	f002 fcc1 	bl	8003068 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006e6:	f7ff fe63 	bl	80003b0 <main>
  bx lr
 80006ea:	4770      	bx	lr
  ldr r0, =_sdata
 80006ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006f4:	08003100 	.word	0x08003100
  ldr r2, =_sbss
 80006f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006fc:	2000019c 	.word	0x2000019c

08000700 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000700:	e7fe      	b.n	8000700 <ADC1_2_IRQHandler>
	...

08000704 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000708:	4b08      	ldr	r3, [pc, #32]	; (800072c <HAL_Init+0x28>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a07      	ldr	r2, [pc, #28]	; (800072c <HAL_Init+0x28>)
 800070e:	f043 0310 	orr.w	r3, r3, #16
 8000712:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000714:	2003      	movs	r0, #3
 8000716:	f000 ff67 	bl	80015e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800071a:	200f      	movs	r0, #15
 800071c:	f000 f808 	bl	8000730 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000720:	f7ff feaa 	bl	8000478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000724:	2300      	movs	r3, #0
}
 8000726:	4618      	mov	r0, r3
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40022000 	.word	0x40022000

08000730 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000738:	4b12      	ldr	r3, [pc, #72]	; (8000784 <HAL_InitTick+0x54>)
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <HAL_InitTick+0x58>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	4619      	mov	r1, r3
 8000742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000746:	fbb3 f3f1 	udiv	r3, r3, r1
 800074a:	fbb2 f3f3 	udiv	r3, r2, r3
 800074e:	4618      	mov	r0, r3
 8000750:	f000 ff7f 	bl	8001652 <HAL_SYSTICK_Config>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800075a:	2301      	movs	r3, #1
 800075c:	e00e      	b.n	800077c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2b0f      	cmp	r3, #15
 8000762:	d80a      	bhi.n	800077a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000764:	2200      	movs	r2, #0
 8000766:	6879      	ldr	r1, [r7, #4]
 8000768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800076c:	f000 ff47 	bl	80015fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000770:	4a06      	ldr	r2, [pc, #24]	; (800078c <HAL_InitTick+0x5c>)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000776:	2300      	movs	r3, #0
 8000778:	e000      	b.n	800077c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800077a:	2301      	movs	r3, #1
}
 800077c:	4618      	mov	r0, r3
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000000 	.word	0x20000000
 8000788:	20000008 	.word	0x20000008
 800078c:	20000004 	.word	0x20000004

08000790 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <HAL_IncTick+0x1c>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	461a      	mov	r2, r3
 800079a:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <HAL_IncTick+0x20>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4413      	add	r3, r2
 80007a0:	4a03      	ldr	r2, [pc, #12]	; (80007b0 <HAL_IncTick+0x20>)
 80007a2:	6013      	str	r3, [r2, #0]
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr
 80007ac:	20000008 	.word	0x20000008
 80007b0:	20000198 	.word	0x20000198

080007b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  return uwTick;
 80007b8:	4b02      	ldr	r3, [pc, #8]	; (80007c4 <HAL_GetTick+0x10>)
 80007ba:	681b      	ldr	r3, [r3, #0]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr
 80007c4:	20000198 	.word	0x20000198

080007c8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d101      	bne.n	80007da <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80007d6:	2301      	movs	r3, #1
 80007d8:	e0ed      	b.n	80009b6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d102      	bne.n	80007ec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f7ff fce6 	bl	80001b8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	f042 0201 	orr.w	r2, r2, #1
 80007fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80007fc:	f7ff ffda 	bl	80007b4 <HAL_GetTick>
 8000800:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000802:	e012      	b.n	800082a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000804:	f7ff ffd6 	bl	80007b4 <HAL_GetTick>
 8000808:	4602      	mov	r2, r0
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	2b0a      	cmp	r3, #10
 8000810:	d90b      	bls.n	800082a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000816:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2205      	movs	r2, #5
 8000822:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000826:	2301      	movs	r3, #1
 8000828:	e0c5      	b.n	80009b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	f003 0301 	and.w	r3, r3, #1
 8000834:	2b00      	cmp	r3, #0
 8000836:	d0e5      	beq.n	8000804 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f022 0202 	bic.w	r2, r2, #2
 8000846:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000848:	f7ff ffb4 	bl	80007b4 <HAL_GetTick>
 800084c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800084e:	e012      	b.n	8000876 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000850:	f7ff ffb0 	bl	80007b4 <HAL_GetTick>
 8000854:	4602      	mov	r2, r0
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	1ad3      	subs	r3, r2, r3
 800085a:	2b0a      	cmp	r3, #10
 800085c:	d90b      	bls.n	8000876 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000862:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2205      	movs	r2, #5
 800086e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000872:	2301      	movs	r3, #1
 8000874:	e09f      	b.n	80009b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	f003 0302 	and.w	r3, r3, #2
 8000880:	2b00      	cmp	r3, #0
 8000882:	d1e5      	bne.n	8000850 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	7e1b      	ldrb	r3, [r3, #24]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d108      	bne.n	800089e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	e007      	b.n	80008ae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80008ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	7e5b      	ldrb	r3, [r3, #25]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d108      	bne.n	80008c8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	e007      	b.n	80008d8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80008d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	7e9b      	ldrb	r3, [r3, #26]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d108      	bne.n	80008f2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f042 0220 	orr.w	r2, r2, #32
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	e007      	b.n	8000902 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f022 0220 	bic.w	r2, r2, #32
 8000900:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	7edb      	ldrb	r3, [r3, #27]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d108      	bne.n	800091c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f022 0210 	bic.w	r2, r2, #16
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	e007      	b.n	800092c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f042 0210 	orr.w	r2, r2, #16
 800092a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	7f1b      	ldrb	r3, [r3, #28]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d108      	bne.n	8000946 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f042 0208 	orr.w	r2, r2, #8
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	e007      	b.n	8000956 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f022 0208 	bic.w	r2, r2, #8
 8000954:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	7f5b      	ldrb	r3, [r3, #29]
 800095a:	2b01      	cmp	r3, #1
 800095c:	d108      	bne.n	8000970 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f042 0204 	orr.w	r2, r2, #4
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	e007      	b.n	8000980 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f022 0204 	bic.w	r2, r2, #4
 800097e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	689a      	ldr	r2, [r3, #8]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	431a      	orrs	r2, r3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	691b      	ldr	r3, [r3, #16]
 800098e:	431a      	orrs	r2, r3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	695b      	ldr	r3, [r3, #20]
 8000994:	ea42 0103 	orr.w	r1, r2, r3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	1e5a      	subs	r2, r3, #1
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	430a      	orrs	r2, r1
 80009a4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2200      	movs	r2, #0
 80009aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2201      	movs	r2, #1
 80009b0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80009be:	b480      	push	{r7}
 80009c0:	b087      	sub	sp, #28
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
 80009c6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009d4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80009d6:	7cfb      	ldrb	r3, [r7, #19]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d003      	beq.n	80009e4 <HAL_CAN_ConfigFilter+0x26>
 80009dc:	7cfb      	ldrb	r3, [r7, #19]
 80009de:	2b02      	cmp	r3, #2
 80009e0:	f040 80aa 	bne.w	8000b38 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80009ea:	f043 0201 	orr.w	r2, r3, #1
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	695b      	ldr	r3, [r3, #20]
 80009f8:	f003 031f 	and.w	r3, r3, #31
 80009fc:	2201      	movs	r2, #1
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	401a      	ands	r2, r3
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	69db      	ldr	r3, [r3, #28]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d123      	bne.n	8000a66 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	43db      	mvns	r3, r3
 8000a28:	401a      	ands	r2, r3
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a3c:	683a      	ldr	r2, [r7, #0]
 8000a3e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000a40:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	3248      	adds	r2, #72	; 0x48
 8000a46:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	689b      	ldr	r3, [r3, #8]
 8000a4e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a5a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a5c:	6979      	ldr	r1, [r7, #20]
 8000a5e:	3348      	adds	r3, #72	; 0x48
 8000a60:	00db      	lsls	r3, r3, #3
 8000a62:	440b      	add	r3, r1
 8000a64:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	69db      	ldr	r3, [r3, #28]
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d122      	bne.n	8000ab4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	431a      	orrs	r2, r3
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a8a:	683a      	ldr	r2, [r7, #0]
 8000a8c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a8e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	3248      	adds	r2, #72	; 0x48
 8000a94:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	68db      	ldr	r3, [r3, #12]
 8000aa2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000aa8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000aaa:	6979      	ldr	r1, [r7, #20]
 8000aac:	3348      	adds	r3, #72	; 0x48
 8000aae:	00db      	lsls	r3, r3, #3
 8000ab0:	440b      	add	r3, r1
 8000ab2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d109      	bne.n	8000ad0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	401a      	ands	r2, r3
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000ace:	e007      	b.n	8000ae0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	431a      	orrs	r2, r3
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	691b      	ldr	r3, [r3, #16]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d109      	bne.n	8000afc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	43db      	mvns	r3, r3
 8000af2:	401a      	ands	r2, r3
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000afa:	e007      	b.n	8000b0c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	431a      	orrs	r2, r3
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	6a1b      	ldr	r3, [r3, #32]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d107      	bne.n	8000b24 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	431a      	orrs	r2, r3
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000b2a:	f023 0201 	bic.w	r2, r3, #1
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000b34:	2300      	movs	r3, #0
 8000b36:	e006      	b.n	8000b46 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b3c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b44:	2301      	movs	r3, #1
  }
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	371c      	adds	r7, #28
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr

08000b50 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d12e      	bne.n	8000bc2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2202      	movs	r2, #2
 8000b68:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f022 0201 	bic.w	r2, r2, #1
 8000b7a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000b7c:	f7ff fe1a 	bl	80007b4 <HAL_GetTick>
 8000b80:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b82:	e012      	b.n	8000baa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b84:	f7ff fe16 	bl	80007b4 <HAL_GetTick>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	2b0a      	cmp	r3, #10
 8000b90:	d90b      	bls.n	8000baa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2205      	movs	r2, #5
 8000ba2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e012      	b.n	8000bd0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f003 0301 	and.w	r3, r3, #1
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d1e5      	bne.n	8000b84 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	e006      	b.n	8000bd0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bc6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
  }
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b089      	sub	sp, #36	; 0x24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
 8000be4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bec:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000bf6:	7ffb      	ldrb	r3, [r7, #31]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d003      	beq.n	8000c04 <HAL_CAN_AddTxMessage+0x2c>
 8000bfc:	7ffb      	ldrb	r3, [r7, #31]
 8000bfe:	2b02      	cmp	r3, #2
 8000c00:	f040 80b8 	bne.w	8000d74 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d10a      	bne.n	8000c24 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d105      	bne.n	8000c24 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f000 80a0 	beq.w	8000d64 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	0e1b      	lsrs	r3, r3, #24
 8000c28:	f003 0303 	and.w	r3, r3, #3
 8000c2c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d907      	bls.n	8000c44 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c38:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000c40:	2301      	movs	r3, #1
 8000c42:	e09e      	b.n	8000d82 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000c44:	2201      	movs	r2, #1
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	409a      	lsls	r2, r3
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d10d      	bne.n	8000c72 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c60:	68f9      	ldr	r1, [r7, #12]
 8000c62:	6809      	ldr	r1, [r1, #0]
 8000c64:	431a      	orrs	r2, r3
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	3318      	adds	r3, #24
 8000c6a:	011b      	lsls	r3, r3, #4
 8000c6c:	440b      	add	r3, r1
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	e00f      	b.n	8000c92 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c7c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c82:	68f9      	ldr	r1, [r7, #12]
 8000c84:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000c86:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	3318      	adds	r3, #24
 8000c8c:	011b      	lsls	r3, r3, #4
 8000c8e:	440b      	add	r3, r1
 8000c90:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	6819      	ldr	r1, [r3, #0]
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	691a      	ldr	r2, [r3, #16]
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	3318      	adds	r3, #24
 8000c9e:	011b      	lsls	r3, r3, #4
 8000ca0:	440b      	add	r3, r1
 8000ca2:	3304      	adds	r3, #4
 8000ca4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	7d1b      	ldrb	r3, [r3, #20]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d111      	bne.n	8000cd2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	3318      	adds	r3, #24
 8000cb6:	011b      	lsls	r3, r3, #4
 8000cb8:	4413      	add	r3, r2
 8000cba:	3304      	adds	r3, #4
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	6811      	ldr	r1, [r2, #0]
 8000cc2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	3318      	adds	r3, #24
 8000cca:	011b      	lsls	r3, r3, #4
 8000ccc:	440b      	add	r3, r1
 8000cce:	3304      	adds	r3, #4
 8000cd0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	3307      	adds	r3, #7
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	061a      	lsls	r2, r3, #24
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	3306      	adds	r3, #6
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	041b      	lsls	r3, r3, #16
 8000ce2:	431a      	orrs	r2, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3305      	adds	r3, #5
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	021b      	lsls	r3, r3, #8
 8000cec:	4313      	orrs	r3, r2
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	3204      	adds	r2, #4
 8000cf2:	7812      	ldrb	r2, [r2, #0]
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	6811      	ldr	r1, [r2, #0]
 8000cfa:	ea43 0200 	orr.w	r2, r3, r0
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	011b      	lsls	r3, r3, #4
 8000d02:	440b      	add	r3, r1
 8000d04:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000d08:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	3303      	adds	r3, #3
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	061a      	lsls	r2, r3, #24
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	3302      	adds	r3, #2
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	041b      	lsls	r3, r3, #16
 8000d1a:	431a      	orrs	r2, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	021b      	lsls	r3, r3, #8
 8000d24:	4313      	orrs	r3, r2
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	7812      	ldrb	r2, [r2, #0]
 8000d2a:	4610      	mov	r0, r2
 8000d2c:	68fa      	ldr	r2, [r7, #12]
 8000d2e:	6811      	ldr	r1, [r2, #0]
 8000d30:	ea43 0200 	orr.w	r2, r3, r0
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	011b      	lsls	r3, r3, #4
 8000d38:	440b      	add	r3, r1
 8000d3a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000d3e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	3318      	adds	r3, #24
 8000d48:	011b      	lsls	r3, r3, #4
 8000d4a:	4413      	add	r3, r2
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	6811      	ldr	r1, [r2, #0]
 8000d52:	f043 0201 	orr.w	r2, r3, #1
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	3318      	adds	r3, #24
 8000d5a:	011b      	lsls	r3, r3, #4
 8000d5c:	440b      	add	r3, r1
 8000d5e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000d60:	2300      	movs	r3, #0
 8000d62:	e00e      	b.n	8000d82 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d68:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000d70:	2301      	movs	r3, #1
 8000d72:	e006      	b.n	8000d82 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d78:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
  }
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3724      	adds	r7, #36	; 0x24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr

08000d8c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b087      	sub	sp, #28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
 8000d98:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000da0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000da2:	7dfb      	ldrb	r3, [r7, #23]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d003      	beq.n	8000db0 <HAL_CAN_GetRxMessage+0x24>
 8000da8:	7dfb      	ldrb	r3, [r7, #23]
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	f040 80f3 	bne.w	8000f96 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d10e      	bne.n	8000dd4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	f003 0303 	and.w	r3, r3, #3
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d116      	bne.n	8000df2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e0e7      	b.n	8000fa4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	691b      	ldr	r3, [r3, #16]
 8000dda:	f003 0303 	and.w	r3, r3, #3
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d107      	bne.n	8000df2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e0d8      	b.n	8000fa4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	331b      	adds	r3, #27
 8000dfa:	011b      	lsls	r3, r3, #4
 8000dfc:	4413      	add	r3, r2
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f003 0204 	and.w	r2, r3, #4
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d10c      	bne.n	8000e2a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	331b      	adds	r3, #27
 8000e18:	011b      	lsls	r3, r3, #4
 8000e1a:	4413      	add	r3, r2
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	0d5b      	lsrs	r3, r3, #21
 8000e20:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	e00b      	b.n	8000e42 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	331b      	adds	r3, #27
 8000e32:	011b      	lsls	r3, r3, #4
 8000e34:	4413      	add	r3, r2
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	08db      	lsrs	r3, r3, #3
 8000e3a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	331b      	adds	r3, #27
 8000e4a:	011b      	lsls	r3, r3, #4
 8000e4c:	4413      	add	r3, r2
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f003 0202 	and.w	r2, r3, #2
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	331b      	adds	r3, #27
 8000e60:	011b      	lsls	r3, r3, #4
 8000e62:	4413      	add	r3, r2
 8000e64:	3304      	adds	r3, #4
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f003 020f 	and.w	r2, r3, #15
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	331b      	adds	r3, #27
 8000e78:	011b      	lsls	r3, r3, #4
 8000e7a:	4413      	add	r3, r2
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	0a1b      	lsrs	r3, r3, #8
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	331b      	adds	r3, #27
 8000e90:	011b      	lsls	r3, r3, #4
 8000e92:	4413      	add	r3, r2
 8000e94:	3304      	adds	r3, #4
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	0c1b      	lsrs	r3, r3, #16
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	011b      	lsls	r3, r3, #4
 8000ea8:	4413      	add	r3, r2
 8000eaa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	011b      	lsls	r3, r3, #4
 8000ebe:	4413      	add	r3, r2
 8000ec0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	0a1a      	lsrs	r2, r3, #8
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	011b      	lsls	r3, r3, #4
 8000ed8:	4413      	add	r3, r2
 8000eda:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	0c1a      	lsrs	r2, r3, #16
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	3302      	adds	r3, #2
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	011b      	lsls	r3, r3, #4
 8000ef2:	4413      	add	r3, r2
 8000ef4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	0e1a      	lsrs	r2, r3, #24
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	3303      	adds	r3, #3
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	011b      	lsls	r3, r3, #4
 8000f0c:	4413      	add	r3, r2
 8000f0e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	3304      	adds	r3, #4
 8000f18:	b2d2      	uxtb	r2, r2
 8000f1a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	011b      	lsls	r3, r3, #4
 8000f24:	4413      	add	r3, r2
 8000f26:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	0a1a      	lsrs	r2, r3, #8
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	3305      	adds	r3, #5
 8000f32:	b2d2      	uxtb	r2, r2
 8000f34:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	011b      	lsls	r3, r3, #4
 8000f3e:	4413      	add	r3, r2
 8000f40:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	0c1a      	lsrs	r2, r3, #16
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	3306      	adds	r3, #6
 8000f4c:	b2d2      	uxtb	r2, r2
 8000f4e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	4413      	add	r3, r2
 8000f5a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	0e1a      	lsrs	r2, r3, #24
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	3307      	adds	r3, #7
 8000f66:	b2d2      	uxtb	r2, r2
 8000f68:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d108      	bne.n	8000f82 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	68da      	ldr	r2, [r3, #12]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f042 0220 	orr.w	r2, r2, #32
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	e007      	b.n	8000f92 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	691a      	ldr	r2, [r3, #16]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f042 0220 	orr.w	r2, r2, #32
 8000f90:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000f92:	2300      	movs	r3, #0
 8000f94:	e006      	b.n	8000fa4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
  }
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	371c      	adds	r7, #28
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr

08000fae <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b085      	sub	sp, #20
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
 8000fb6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fbe:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d002      	beq.n	8000fcc <HAL_CAN_ActivateNotification+0x1e>
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d109      	bne.n	8000fe0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6959      	ldr	r1, [r3, #20]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	683a      	ldr	r2, [r7, #0]
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	e006      	b.n	8000fee <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
  }
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3714      	adds	r7, #20
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr

08000ff8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001000:	2300      	movs	r3, #0
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	691b      	ldr	r3, [r3, #16]
 800102a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001034:	6a3b      	ldr	r3, [r7, #32]
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	2b00      	cmp	r3, #0
 800103c:	d07c      	beq.n	8001138 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	2b00      	cmp	r3, #0
 8001046:	d023      	beq.n	8001090 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2201      	movs	r2, #1
 800104e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f000 f983 	bl	8001366 <HAL_CAN_TxMailbox0CompleteCallback>
 8001060:	e016      	b.n	8001090 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	2b00      	cmp	r3, #0
 800106a:	d004      	beq.n	8001076 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
 8001074:	e00c      	b.n	8001090 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	f003 0308 	and.w	r3, r3, #8
 800107c:	2b00      	cmp	r3, #0
 800107e:	d004      	beq.n	800108a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001082:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
 8001088:	e002      	b.n	8001090 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f000 f986 	bl	800139c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001096:	2b00      	cmp	r3, #0
 8001098:	d024      	beq.n	80010e4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010a2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f000 f962 	bl	8001378 <HAL_CAN_TxMailbox1CompleteCallback>
 80010b4:	e016      	b.n	80010e4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d004      	beq.n	80010ca <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80010c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
 80010c8:	e00c      	b.n	80010e4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d004      	beq.n	80010de <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80010d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
 80010dc:	e002      	b.n	80010e4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f000 f965 	bl	80013ae <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d024      	beq.n	8001138 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010f6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f000 f941 	bl	800138a <HAL_CAN_TxMailbox2CompleteCallback>
 8001108:	e016      	b.n	8001138 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d004      	beq.n	800111e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
 800111c:	e00c      	b.n	8001138 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d004      	beq.n	8001132 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
 8001130:	e002      	b.n	8001138 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f000 f944 	bl	80013c0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001138:	6a3b      	ldr	r3, [r7, #32]
 800113a:	f003 0308 	and.w	r3, r3, #8
 800113e:	2b00      	cmp	r3, #0
 8001140:	d00c      	beq.n	800115c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	f003 0310 	and.w	r3, r3, #16
 8001148:	2b00      	cmp	r3, #0
 800114a:	d007      	beq.n	800115c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800114c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001152:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2210      	movs	r2, #16
 800115a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800115c:	6a3b      	ldr	r3, [r7, #32]
 800115e:	f003 0304 	and.w	r3, r3, #4
 8001162:	2b00      	cmp	r3, #0
 8001164:	d00b      	beq.n	800117e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	f003 0308 	and.w	r3, r3, #8
 800116c:	2b00      	cmp	r3, #0
 800116e:	d006      	beq.n	800117e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2208      	movs	r2, #8
 8001176:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f000 f933 	bl	80013e4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800117e:	6a3b      	ldr	r3, [r7, #32]
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d009      	beq.n	800119c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	f003 0303 	and.w	r3, r3, #3
 8001192:	2b00      	cmp	r3, #0
 8001194:	d002      	beq.n	800119c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f000 f91b 	bl	80013d2 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800119c:	6a3b      	ldr	r3, [r7, #32]
 800119e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d00c      	beq.n	80011c0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	f003 0310 	and.w	r3, r3, #16
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d007      	beq.n	80011c0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80011b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2210      	movs	r2, #16
 80011be:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80011c0:	6a3b      	ldr	r3, [r7, #32]
 80011c2:	f003 0320 	and.w	r3, r3, #32
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d00b      	beq.n	80011e2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	f003 0308 	and.w	r3, r3, #8
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d006      	beq.n	80011e2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2208      	movs	r2, #8
 80011da:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f000 f913 	bl	8001408 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80011e2:	6a3b      	ldr	r3, [r7, #32]
 80011e4:	f003 0310 	and.w	r3, r3, #16
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d009      	beq.n	8001200 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d002      	beq.n	8001200 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f000 f8fb 	bl	80013f6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001200:	6a3b      	ldr	r3, [r7, #32]
 8001202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d00b      	beq.n	8001222 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	f003 0310 	and.w	r3, r3, #16
 8001210:	2b00      	cmp	r3, #0
 8001212:	d006      	beq.n	8001222 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2210      	movs	r2, #16
 800121a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f000 f8fc 	bl	800141a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001222:	6a3b      	ldr	r3, [r7, #32]
 8001224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d00b      	beq.n	8001244 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	2b00      	cmp	r3, #0
 8001234:	d006      	beq.n	8001244 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2208      	movs	r2, #8
 800123c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f000 f8f4 	bl	800142c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001244:	6a3b      	ldr	r3, [r7, #32]
 8001246:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d07b      	beq.n	8001346 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	f003 0304 	and.w	r3, r3, #4
 8001254:	2b00      	cmp	r3, #0
 8001256:	d072      	beq.n	800133e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001258:	6a3b      	ldr	r3, [r7, #32]
 800125a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800125e:	2b00      	cmp	r3, #0
 8001260:	d008      	beq.n	8001274 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800126c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001274:	6a3b      	ldr	r3, [r7, #32]
 8001276:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800127a:	2b00      	cmp	r3, #0
 800127c:	d008      	beq.n	8001290 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128a:	f043 0302 	orr.w	r3, r3, #2
 800128e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001290:	6a3b      	ldr	r3, [r7, #32]
 8001292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001296:	2b00      	cmp	r3, #0
 8001298:	d008      	beq.n	80012ac <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d003      	beq.n	80012ac <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80012a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a6:	f043 0304 	orr.w	r3, r3, #4
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80012ac:	6a3b      	ldr	r3, [r7, #32]
 80012ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d043      	beq.n	800133e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d03e      	beq.n	800133e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80012c6:	2b60      	cmp	r3, #96	; 0x60
 80012c8:	d02b      	beq.n	8001322 <HAL_CAN_IRQHandler+0x32a>
 80012ca:	2b60      	cmp	r3, #96	; 0x60
 80012cc:	d82e      	bhi.n	800132c <HAL_CAN_IRQHandler+0x334>
 80012ce:	2b50      	cmp	r3, #80	; 0x50
 80012d0:	d022      	beq.n	8001318 <HAL_CAN_IRQHandler+0x320>
 80012d2:	2b50      	cmp	r3, #80	; 0x50
 80012d4:	d82a      	bhi.n	800132c <HAL_CAN_IRQHandler+0x334>
 80012d6:	2b40      	cmp	r3, #64	; 0x40
 80012d8:	d019      	beq.n	800130e <HAL_CAN_IRQHandler+0x316>
 80012da:	2b40      	cmp	r3, #64	; 0x40
 80012dc:	d826      	bhi.n	800132c <HAL_CAN_IRQHandler+0x334>
 80012de:	2b30      	cmp	r3, #48	; 0x30
 80012e0:	d010      	beq.n	8001304 <HAL_CAN_IRQHandler+0x30c>
 80012e2:	2b30      	cmp	r3, #48	; 0x30
 80012e4:	d822      	bhi.n	800132c <HAL_CAN_IRQHandler+0x334>
 80012e6:	2b10      	cmp	r3, #16
 80012e8:	d002      	beq.n	80012f0 <HAL_CAN_IRQHandler+0x2f8>
 80012ea:	2b20      	cmp	r3, #32
 80012ec:	d005      	beq.n	80012fa <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80012ee:	e01d      	b.n	800132c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80012f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f2:	f043 0308 	orr.w	r3, r3, #8
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012f8:	e019      	b.n	800132e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80012fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fc:	f043 0310 	orr.w	r3, r3, #16
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001302:	e014      	b.n	800132e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001306:	f043 0320 	orr.w	r3, r3, #32
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800130c:	e00f      	b.n	800132e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800130e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001316:	e00a      	b.n	800132e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001320:	e005      	b.n	800132e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800132a:	e000      	b.n	800132e <HAL_CAN_IRQHandler+0x336>
            break;
 800132c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	699a      	ldr	r2, [r3, #24]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800133c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2204      	movs	r2, #4
 8001344:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001348:	2b00      	cmp	r3, #0
 800134a:	d008      	beq.n	800135e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001352:	431a      	orrs	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f000 f870 	bl	800143e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800135e:	bf00      	nop
 8001360:	3728      	adds	r7, #40	; 0x28
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr

0800138a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800138a:	b480      	push	{r7}
 800138c:	b083      	sub	sp, #12
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr

0800139c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr

080013ae <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr

080013c0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr

080013d2 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr

080013e4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr

080013f6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr

0800141a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr

0800142c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr

0800143e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr

08001450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <__NVIC_SetPriorityGrouping+0x44>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001466:	68ba      	ldr	r2, [r7, #8]
 8001468:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800146c:	4013      	ands	r3, r2
 800146e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001478:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800147c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001482:	4a04      	ldr	r2, [pc, #16]	; (8001494 <__NVIC_SetPriorityGrouping+0x44>)
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	60d3      	str	r3, [r2, #12]
}
 8001488:	bf00      	nop
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <__NVIC_GetPriorityGrouping+0x18>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	0a1b      	lsrs	r3, r3, #8
 80014a2:	f003 0307 	and.w	r3, r3, #7
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	db0b      	blt.n	80014de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	f003 021f 	and.w	r2, r3, #31
 80014cc:	4906      	ldr	r1, [pc, #24]	; (80014e8 <__NVIC_EnableIRQ+0x34>)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	095b      	lsrs	r3, r3, #5
 80014d4:	2001      	movs	r0, #1
 80014d6:	fa00 f202 	lsl.w	r2, r0, r2
 80014da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	e000e100 	.word	0xe000e100

080014ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	6039      	str	r1, [r7, #0]
 80014f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	db0a      	blt.n	8001516 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	b2da      	uxtb	r2, r3
 8001504:	490c      	ldr	r1, [pc, #48]	; (8001538 <__NVIC_SetPriority+0x4c>)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	0112      	lsls	r2, r2, #4
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	440b      	add	r3, r1
 8001510:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001514:	e00a      	b.n	800152c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4908      	ldr	r1, [pc, #32]	; (800153c <__NVIC_SetPriority+0x50>)
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	3b04      	subs	r3, #4
 8001524:	0112      	lsls	r2, r2, #4
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	440b      	add	r3, r1
 800152a:	761a      	strb	r2, [r3, #24]
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	e000e100 	.word	0xe000e100
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001540:	b480      	push	{r7}
 8001542:	b089      	sub	sp, #36	; 0x24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f1c3 0307 	rsb	r3, r3, #7
 800155a:	2b04      	cmp	r3, #4
 800155c:	bf28      	it	cs
 800155e:	2304      	movcs	r3, #4
 8001560:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3304      	adds	r3, #4
 8001566:	2b06      	cmp	r3, #6
 8001568:	d902      	bls.n	8001570 <NVIC_EncodePriority+0x30>
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3b03      	subs	r3, #3
 800156e:	e000      	b.n	8001572 <NVIC_EncodePriority+0x32>
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43da      	mvns	r2, r3
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	401a      	ands	r2, r3
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001588:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	fa01 f303 	lsl.w	r3, r1, r3
 8001592:	43d9      	mvns	r1, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	4313      	orrs	r3, r2
         );
}
 800159a:	4618      	mov	r0, r3
 800159c:	3724      	adds	r7, #36	; 0x24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr

080015a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015b4:	d301      	bcc.n	80015ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015b6:	2301      	movs	r3, #1
 80015b8:	e00f      	b.n	80015da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ba:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <SysTick_Config+0x40>)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3b01      	subs	r3, #1
 80015c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015c2:	210f      	movs	r1, #15
 80015c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015c8:	f7ff ff90 	bl	80014ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015cc:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <SysTick_Config+0x40>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015d2:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <SysTick_Config+0x40>)
 80015d4:	2207      	movs	r2, #7
 80015d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	e000e010 	.word	0xe000e010

080015e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff ff2d 	bl	8001450 <__NVIC_SetPriorityGrouping>
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015fe:	b580      	push	{r7, lr}
 8001600:	b086      	sub	sp, #24
 8001602:	af00      	add	r7, sp, #0
 8001604:	4603      	mov	r3, r0
 8001606:	60b9      	str	r1, [r7, #8]
 8001608:	607a      	str	r2, [r7, #4]
 800160a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001610:	f7ff ff42 	bl	8001498 <__NVIC_GetPriorityGrouping>
 8001614:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	68b9      	ldr	r1, [r7, #8]
 800161a:	6978      	ldr	r0, [r7, #20]
 800161c:	f7ff ff90 	bl	8001540 <NVIC_EncodePriority>
 8001620:	4602      	mov	r2, r0
 8001622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001626:	4611      	mov	r1, r2
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ff5f 	bl	80014ec <__NVIC_SetPriority>
}
 800162e:	bf00      	nop
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	4603      	mov	r3, r0
 800163e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ff35 	bl	80014b4 <__NVIC_EnableIRQ>
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff ffa2 	bl	80015a4 <SysTick_Config>
 8001660:	4603      	mov	r3, r0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b086      	sub	sp, #24
 800166e:	af00      	add	r7, sp, #0
 8001670:	60f8      	str	r0, [r7, #12]
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	607a      	str	r2, [r7, #4]
 8001676:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001678:	2300      	movs	r3, #0
 800167a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d101      	bne.n	800168a <HAL_DMA_Start_IT+0x20>
 8001686:	2302      	movs	r3, #2
 8001688:	e04a      	b.n	8001720 <HAL_DMA_Start_IT+0xb6>
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2201      	movs	r2, #1
 800168e:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001698:	2b01      	cmp	r3, #1
 800169a:	d13a      	bne.n	8001712 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2202      	movs	r2, #2
 80016a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2200      	movs	r2, #0
 80016a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 0201 	bic.w	r2, r2, #1
 80016b8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	68b9      	ldr	r1, [r7, #8]
 80016c0:	68f8      	ldr	r0, [r7, #12]
 80016c2:	f000 f9e7 	bl	8001a94 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d008      	beq.n	80016e0 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f042 020e 	orr.w	r2, r2, #14
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	e00f      	b.n	8001700 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f022 0204 	bic.w	r2, r2, #4
 80016ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f042 020a 	orr.w	r2, r2, #10
 80016fe:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f042 0201 	orr.w	r2, r2, #1
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	e005      	b.n	800171e <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800171a:	2302      	movs	r3, #2
 800171c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800171e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001730:	2300      	movs	r3, #0
 8001732:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800173a:	2b02      	cmp	r3, #2
 800173c:	d008      	beq.n	8001750 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2204      	movs	r2, #4
 8001742:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e020      	b.n	8001792 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f022 020e 	bic.w	r2, r2, #14
 800175e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 0201 	bic.w	r2, r2, #1
 800176e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001778:	2101      	movs	r1, #1
 800177a:	fa01 f202 	lsl.w	r2, r1, r2
 800177e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2201      	movs	r2, #1
 8001784:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001790:	7bfb      	ldrb	r3, [r7, #15]
}
 8001792:	4618      	mov	r0, r3
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017a4:	2300      	movs	r3, #0
 80017a6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d005      	beq.n	80017be <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2204      	movs	r2, #4
 80017b6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	73fb      	strb	r3, [r7, #15]
 80017bc:	e051      	b.n	8001862 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 020e 	bic.w	r2, r2, #14
 80017cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 0201 	bic.w	r2, r2, #1
 80017dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a22      	ldr	r2, [pc, #136]	; (800186c <HAL_DMA_Abort_IT+0xd0>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d029      	beq.n	800183c <HAL_DMA_Abort_IT+0xa0>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a20      	ldr	r2, [pc, #128]	; (8001870 <HAL_DMA_Abort_IT+0xd4>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d022      	beq.n	8001838 <HAL_DMA_Abort_IT+0x9c>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a1f      	ldr	r2, [pc, #124]	; (8001874 <HAL_DMA_Abort_IT+0xd8>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d01a      	beq.n	8001832 <HAL_DMA_Abort_IT+0x96>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a1d      	ldr	r2, [pc, #116]	; (8001878 <HAL_DMA_Abort_IT+0xdc>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d012      	beq.n	800182c <HAL_DMA_Abort_IT+0x90>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a1c      	ldr	r2, [pc, #112]	; (800187c <HAL_DMA_Abort_IT+0xe0>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d00a      	beq.n	8001826 <HAL_DMA_Abort_IT+0x8a>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a1a      	ldr	r2, [pc, #104]	; (8001880 <HAL_DMA_Abort_IT+0xe4>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d102      	bne.n	8001820 <HAL_DMA_Abort_IT+0x84>
 800181a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800181e:	e00e      	b.n	800183e <HAL_DMA_Abort_IT+0xa2>
 8001820:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001824:	e00b      	b.n	800183e <HAL_DMA_Abort_IT+0xa2>
 8001826:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800182a:	e008      	b.n	800183e <HAL_DMA_Abort_IT+0xa2>
 800182c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001830:	e005      	b.n	800183e <HAL_DMA_Abort_IT+0xa2>
 8001832:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001836:	e002      	b.n	800183e <HAL_DMA_Abort_IT+0xa2>
 8001838:	2310      	movs	r3, #16
 800183a:	e000      	b.n	800183e <HAL_DMA_Abort_IT+0xa2>
 800183c:	2301      	movs	r3, #1
 800183e:	4a11      	ldr	r2, [pc, #68]	; (8001884 <HAL_DMA_Abort_IT+0xe8>)
 8001840:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	4798      	blx	r3
    } 
  }
  return status;
 8001862:	7bfb      	ldrb	r3, [r7, #15]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40020008 	.word	0x40020008
 8001870:	4002001c 	.word	0x4002001c
 8001874:	40020030 	.word	0x40020030
 8001878:	40020044 	.word	0x40020044
 800187c:	40020058 	.word	0x40020058
 8001880:	4002006c 	.word	0x4002006c
 8001884:	40020000 	.word	0x40020000

08001888 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a4:	2204      	movs	r2, #4
 80018a6:	409a      	lsls	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4013      	ands	r3, r2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d04f      	beq.n	8001950 <HAL_DMA_IRQHandler+0xc8>
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	f003 0304 	and.w	r3, r3, #4
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d04a      	beq.n	8001950 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0320 	and.w	r3, r3, #32
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d107      	bne.n	80018d8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 0204 	bic.w	r2, r2, #4
 80018d6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a66      	ldr	r2, [pc, #408]	; (8001a78 <HAL_DMA_IRQHandler+0x1f0>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d029      	beq.n	8001936 <HAL_DMA_IRQHandler+0xae>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a65      	ldr	r2, [pc, #404]	; (8001a7c <HAL_DMA_IRQHandler+0x1f4>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d022      	beq.n	8001932 <HAL_DMA_IRQHandler+0xaa>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a63      	ldr	r2, [pc, #396]	; (8001a80 <HAL_DMA_IRQHandler+0x1f8>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d01a      	beq.n	800192c <HAL_DMA_IRQHandler+0xa4>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a62      	ldr	r2, [pc, #392]	; (8001a84 <HAL_DMA_IRQHandler+0x1fc>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d012      	beq.n	8001926 <HAL_DMA_IRQHandler+0x9e>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a60      	ldr	r2, [pc, #384]	; (8001a88 <HAL_DMA_IRQHandler+0x200>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d00a      	beq.n	8001920 <HAL_DMA_IRQHandler+0x98>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a5f      	ldr	r2, [pc, #380]	; (8001a8c <HAL_DMA_IRQHandler+0x204>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d102      	bne.n	800191a <HAL_DMA_IRQHandler+0x92>
 8001914:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001918:	e00e      	b.n	8001938 <HAL_DMA_IRQHandler+0xb0>
 800191a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800191e:	e00b      	b.n	8001938 <HAL_DMA_IRQHandler+0xb0>
 8001920:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001924:	e008      	b.n	8001938 <HAL_DMA_IRQHandler+0xb0>
 8001926:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800192a:	e005      	b.n	8001938 <HAL_DMA_IRQHandler+0xb0>
 800192c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001930:	e002      	b.n	8001938 <HAL_DMA_IRQHandler+0xb0>
 8001932:	2340      	movs	r3, #64	; 0x40
 8001934:	e000      	b.n	8001938 <HAL_DMA_IRQHandler+0xb0>
 8001936:	2304      	movs	r3, #4
 8001938:	4a55      	ldr	r2, [pc, #340]	; (8001a90 <HAL_DMA_IRQHandler+0x208>)
 800193a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001940:	2b00      	cmp	r3, #0
 8001942:	f000 8094 	beq.w	8001a6e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800194e:	e08e      	b.n	8001a6e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	2202      	movs	r2, #2
 8001956:	409a      	lsls	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4013      	ands	r3, r2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d056      	beq.n	8001a0e <HAL_DMA_IRQHandler+0x186>
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d051      	beq.n	8001a0e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0320 	and.w	r3, r3, #32
 8001974:	2b00      	cmp	r3, #0
 8001976:	d10b      	bne.n	8001990 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 020a 	bic.w	r2, r2, #10
 8001986:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a38      	ldr	r2, [pc, #224]	; (8001a78 <HAL_DMA_IRQHandler+0x1f0>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d029      	beq.n	80019ee <HAL_DMA_IRQHandler+0x166>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a37      	ldr	r2, [pc, #220]	; (8001a7c <HAL_DMA_IRQHandler+0x1f4>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d022      	beq.n	80019ea <HAL_DMA_IRQHandler+0x162>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a35      	ldr	r2, [pc, #212]	; (8001a80 <HAL_DMA_IRQHandler+0x1f8>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d01a      	beq.n	80019e4 <HAL_DMA_IRQHandler+0x15c>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a34      	ldr	r2, [pc, #208]	; (8001a84 <HAL_DMA_IRQHandler+0x1fc>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d012      	beq.n	80019de <HAL_DMA_IRQHandler+0x156>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a32      	ldr	r2, [pc, #200]	; (8001a88 <HAL_DMA_IRQHandler+0x200>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d00a      	beq.n	80019d8 <HAL_DMA_IRQHandler+0x150>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a31      	ldr	r2, [pc, #196]	; (8001a8c <HAL_DMA_IRQHandler+0x204>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d102      	bne.n	80019d2 <HAL_DMA_IRQHandler+0x14a>
 80019cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019d0:	e00e      	b.n	80019f0 <HAL_DMA_IRQHandler+0x168>
 80019d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019d6:	e00b      	b.n	80019f0 <HAL_DMA_IRQHandler+0x168>
 80019d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019dc:	e008      	b.n	80019f0 <HAL_DMA_IRQHandler+0x168>
 80019de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019e2:	e005      	b.n	80019f0 <HAL_DMA_IRQHandler+0x168>
 80019e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019e8:	e002      	b.n	80019f0 <HAL_DMA_IRQHandler+0x168>
 80019ea:	2320      	movs	r3, #32
 80019ec:	e000      	b.n	80019f0 <HAL_DMA_IRQHandler+0x168>
 80019ee:	2302      	movs	r3, #2
 80019f0:	4a27      	ldr	r2, [pc, #156]	; (8001a90 <HAL_DMA_IRQHandler+0x208>)
 80019f2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d034      	beq.n	8001a6e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a0c:	e02f      	b.n	8001a6e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	2208      	movs	r2, #8
 8001a14:	409a      	lsls	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d028      	beq.n	8001a70 <HAL_DMA_IRQHandler+0x1e8>
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	f003 0308 	and.w	r3, r3, #8
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d023      	beq.n	8001a70 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f022 020e 	bic.w	r2, r2, #14
 8001a36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a40:	2101      	movs	r1, #1
 8001a42:	fa01 f202 	lsl.w	r2, r1, r2
 8001a46:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d004      	beq.n	8001a70 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	4798      	blx	r3
    }
  }
  return;
 8001a6e:	bf00      	nop
 8001a70:	bf00      	nop
}
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40020008 	.word	0x40020008
 8001a7c:	4002001c 	.word	0x4002001c
 8001a80:	40020030 	.word	0x40020030
 8001a84:	40020044 	.word	0x40020044
 8001a88:	40020058 	.word	0x40020058
 8001a8c:	4002006c 	.word	0x4002006c
 8001a90:	40020000 	.word	0x40020000

08001a94 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
 8001aa0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aaa:	2101      	movs	r1, #1
 8001aac:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b10      	cmp	r3, #16
 8001ac0:	d108      	bne.n	8001ad4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ad2:	e007      	b.n	8001ae4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68ba      	ldr	r2, [r7, #8]
 8001ada:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	60da      	str	r2, [r3, #12]
}
 8001ae4:	bf00      	nop
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr
	...

08001af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b08b      	sub	sp, #44	; 0x2c
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001afa:	2300      	movs	r3, #0
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001afe:	2300      	movs	r3, #0
 8001b00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b02:	e169      	b.n	8001dd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b04:	2201      	movs	r2, #1
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	69fa      	ldr	r2, [r7, #28]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	f040 8158 	bne.w	8001dd2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	4a9a      	ldr	r2, [pc, #616]	; (8001d90 <HAL_GPIO_Init+0x2a0>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d05e      	beq.n	8001bea <HAL_GPIO_Init+0xfa>
 8001b2c:	4a98      	ldr	r2, [pc, #608]	; (8001d90 <HAL_GPIO_Init+0x2a0>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d875      	bhi.n	8001c1e <HAL_GPIO_Init+0x12e>
 8001b32:	4a98      	ldr	r2, [pc, #608]	; (8001d94 <HAL_GPIO_Init+0x2a4>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d058      	beq.n	8001bea <HAL_GPIO_Init+0xfa>
 8001b38:	4a96      	ldr	r2, [pc, #600]	; (8001d94 <HAL_GPIO_Init+0x2a4>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d86f      	bhi.n	8001c1e <HAL_GPIO_Init+0x12e>
 8001b3e:	4a96      	ldr	r2, [pc, #600]	; (8001d98 <HAL_GPIO_Init+0x2a8>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d052      	beq.n	8001bea <HAL_GPIO_Init+0xfa>
 8001b44:	4a94      	ldr	r2, [pc, #592]	; (8001d98 <HAL_GPIO_Init+0x2a8>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d869      	bhi.n	8001c1e <HAL_GPIO_Init+0x12e>
 8001b4a:	4a94      	ldr	r2, [pc, #592]	; (8001d9c <HAL_GPIO_Init+0x2ac>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d04c      	beq.n	8001bea <HAL_GPIO_Init+0xfa>
 8001b50:	4a92      	ldr	r2, [pc, #584]	; (8001d9c <HAL_GPIO_Init+0x2ac>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d863      	bhi.n	8001c1e <HAL_GPIO_Init+0x12e>
 8001b56:	4a92      	ldr	r2, [pc, #584]	; (8001da0 <HAL_GPIO_Init+0x2b0>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d046      	beq.n	8001bea <HAL_GPIO_Init+0xfa>
 8001b5c:	4a90      	ldr	r2, [pc, #576]	; (8001da0 <HAL_GPIO_Init+0x2b0>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d85d      	bhi.n	8001c1e <HAL_GPIO_Init+0x12e>
 8001b62:	2b12      	cmp	r3, #18
 8001b64:	d82a      	bhi.n	8001bbc <HAL_GPIO_Init+0xcc>
 8001b66:	2b12      	cmp	r3, #18
 8001b68:	d859      	bhi.n	8001c1e <HAL_GPIO_Init+0x12e>
 8001b6a:	a201      	add	r2, pc, #4	; (adr r2, 8001b70 <HAL_GPIO_Init+0x80>)
 8001b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b70:	08001beb 	.word	0x08001beb
 8001b74:	08001bc5 	.word	0x08001bc5
 8001b78:	08001bd7 	.word	0x08001bd7
 8001b7c:	08001c19 	.word	0x08001c19
 8001b80:	08001c1f 	.word	0x08001c1f
 8001b84:	08001c1f 	.word	0x08001c1f
 8001b88:	08001c1f 	.word	0x08001c1f
 8001b8c:	08001c1f 	.word	0x08001c1f
 8001b90:	08001c1f 	.word	0x08001c1f
 8001b94:	08001c1f 	.word	0x08001c1f
 8001b98:	08001c1f 	.word	0x08001c1f
 8001b9c:	08001c1f 	.word	0x08001c1f
 8001ba0:	08001c1f 	.word	0x08001c1f
 8001ba4:	08001c1f 	.word	0x08001c1f
 8001ba8:	08001c1f 	.word	0x08001c1f
 8001bac:	08001c1f 	.word	0x08001c1f
 8001bb0:	08001c1f 	.word	0x08001c1f
 8001bb4:	08001bcd 	.word	0x08001bcd
 8001bb8:	08001be1 	.word	0x08001be1
 8001bbc:	4a79      	ldr	r2, [pc, #484]	; (8001da4 <HAL_GPIO_Init+0x2b4>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d013      	beq.n	8001bea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bc2:	e02c      	b.n	8001c1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	623b      	str	r3, [r7, #32]
          break;
 8001bca:	e029      	b.n	8001c20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	623b      	str	r3, [r7, #32]
          break;
 8001bd4:	e024      	b.n	8001c20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	3308      	adds	r3, #8
 8001bdc:	623b      	str	r3, [r7, #32]
          break;
 8001bde:	e01f      	b.n	8001c20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	330c      	adds	r3, #12
 8001be6:	623b      	str	r3, [r7, #32]
          break;
 8001be8:	e01a      	b.n	8001c20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d102      	bne.n	8001bf8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bf2:	2304      	movs	r3, #4
 8001bf4:	623b      	str	r3, [r7, #32]
          break;
 8001bf6:	e013      	b.n	8001c20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d105      	bne.n	8001c0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c00:	2308      	movs	r3, #8
 8001c02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	69fa      	ldr	r2, [r7, #28]
 8001c08:	611a      	str	r2, [r3, #16]
          break;
 8001c0a:	e009      	b.n	8001c20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c0c:	2308      	movs	r3, #8
 8001c0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	69fa      	ldr	r2, [r7, #28]
 8001c14:	615a      	str	r2, [r3, #20]
          break;
 8001c16:	e003      	b.n	8001c20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	623b      	str	r3, [r7, #32]
          break;
 8001c1c:	e000      	b.n	8001c20 <HAL_GPIO_Init+0x130>
          break;
 8001c1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	2bff      	cmp	r3, #255	; 0xff
 8001c24:	d801      	bhi.n	8001c2a <HAL_GPIO_Init+0x13a>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	e001      	b.n	8001c2e <HAL_GPIO_Init+0x13e>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	2bff      	cmp	r3, #255	; 0xff
 8001c34:	d802      	bhi.n	8001c3c <HAL_GPIO_Init+0x14c>
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	e002      	b.n	8001c42 <HAL_GPIO_Init+0x152>
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	3b08      	subs	r3, #8
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	210f      	movs	r1, #15
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	401a      	ands	r2, r3
 8001c54:	6a39      	ldr	r1, [r7, #32]
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 80b1 	beq.w	8001dd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c70:	4b4d      	ldr	r3, [pc, #308]	; (8001da8 <HAL_GPIO_Init+0x2b8>)
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	4a4c      	ldr	r2, [pc, #304]	; (8001da8 <HAL_GPIO_Init+0x2b8>)
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	6193      	str	r3, [r2, #24]
 8001c7c:	4b4a      	ldr	r3, [pc, #296]	; (8001da8 <HAL_GPIO_Init+0x2b8>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c88:	4a48      	ldr	r2, [pc, #288]	; (8001dac <HAL_GPIO_Init+0x2bc>)
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	089b      	lsrs	r3, r3, #2
 8001c8e:	3302      	adds	r3, #2
 8001c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	f003 0303 	and.w	r3, r3, #3
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	220f      	movs	r2, #15
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a40      	ldr	r2, [pc, #256]	; (8001db0 <HAL_GPIO_Init+0x2c0>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d013      	beq.n	8001cdc <HAL_GPIO_Init+0x1ec>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a3f      	ldr	r2, [pc, #252]	; (8001db4 <HAL_GPIO_Init+0x2c4>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d00d      	beq.n	8001cd8 <HAL_GPIO_Init+0x1e8>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a3e      	ldr	r2, [pc, #248]	; (8001db8 <HAL_GPIO_Init+0x2c8>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d007      	beq.n	8001cd4 <HAL_GPIO_Init+0x1e4>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a3d      	ldr	r2, [pc, #244]	; (8001dbc <HAL_GPIO_Init+0x2cc>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d101      	bne.n	8001cd0 <HAL_GPIO_Init+0x1e0>
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e006      	b.n	8001cde <HAL_GPIO_Init+0x1ee>
 8001cd0:	2304      	movs	r3, #4
 8001cd2:	e004      	b.n	8001cde <HAL_GPIO_Init+0x1ee>
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	e002      	b.n	8001cde <HAL_GPIO_Init+0x1ee>
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e000      	b.n	8001cde <HAL_GPIO_Init+0x1ee>
 8001cdc:	2300      	movs	r3, #0
 8001cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ce0:	f002 0203 	and.w	r2, r2, #3
 8001ce4:	0092      	lsls	r2, r2, #2
 8001ce6:	4093      	lsls	r3, r2
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cee:	492f      	ldr	r1, [pc, #188]	; (8001dac <HAL_GPIO_Init+0x2bc>)
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	089b      	lsrs	r3, r3, #2
 8001cf4:	3302      	adds	r3, #2
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d006      	beq.n	8001d16 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d08:	4b2d      	ldr	r3, [pc, #180]	; (8001dc0 <HAL_GPIO_Init+0x2d0>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	492c      	ldr	r1, [pc, #176]	; (8001dc0 <HAL_GPIO_Init+0x2d0>)
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	600b      	str	r3, [r1, #0]
 8001d14:	e006      	b.n	8001d24 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d16:	4b2a      	ldr	r3, [pc, #168]	; (8001dc0 <HAL_GPIO_Init+0x2d0>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	4928      	ldr	r1, [pc, #160]	; (8001dc0 <HAL_GPIO_Init+0x2d0>)
 8001d20:	4013      	ands	r3, r2
 8001d22:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d006      	beq.n	8001d3e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d30:	4b23      	ldr	r3, [pc, #140]	; (8001dc0 <HAL_GPIO_Init+0x2d0>)
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	4922      	ldr	r1, [pc, #136]	; (8001dc0 <HAL_GPIO_Init+0x2d0>)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	604b      	str	r3, [r1, #4]
 8001d3c:	e006      	b.n	8001d4c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d3e:	4b20      	ldr	r3, [pc, #128]	; (8001dc0 <HAL_GPIO_Init+0x2d0>)
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	43db      	mvns	r3, r3
 8001d46:	491e      	ldr	r1, [pc, #120]	; (8001dc0 <HAL_GPIO_Init+0x2d0>)
 8001d48:	4013      	ands	r3, r2
 8001d4a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d006      	beq.n	8001d66 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d58:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <HAL_GPIO_Init+0x2d0>)
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	4918      	ldr	r1, [pc, #96]	; (8001dc0 <HAL_GPIO_Init+0x2d0>)
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	608b      	str	r3, [r1, #8]
 8001d64:	e006      	b.n	8001d74 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d66:	4b16      	ldr	r3, [pc, #88]	; (8001dc0 <HAL_GPIO_Init+0x2d0>)
 8001d68:	689a      	ldr	r2, [r3, #8]
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	4914      	ldr	r1, [pc, #80]	; (8001dc0 <HAL_GPIO_Init+0x2d0>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d021      	beq.n	8001dc4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d80:	4b0f      	ldr	r3, [pc, #60]	; (8001dc0 <HAL_GPIO_Init+0x2d0>)
 8001d82:	68da      	ldr	r2, [r3, #12]
 8001d84:	490e      	ldr	r1, [pc, #56]	; (8001dc0 <HAL_GPIO_Init+0x2d0>)
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	60cb      	str	r3, [r1, #12]
 8001d8c:	e021      	b.n	8001dd2 <HAL_GPIO_Init+0x2e2>
 8001d8e:	bf00      	nop
 8001d90:	10320000 	.word	0x10320000
 8001d94:	10310000 	.word	0x10310000
 8001d98:	10220000 	.word	0x10220000
 8001d9c:	10210000 	.word	0x10210000
 8001da0:	10120000 	.word	0x10120000
 8001da4:	10110000 	.word	0x10110000
 8001da8:	40021000 	.word	0x40021000
 8001dac:	40010000 	.word	0x40010000
 8001db0:	40010800 	.word	0x40010800
 8001db4:	40010c00 	.word	0x40010c00
 8001db8:	40011000 	.word	0x40011000
 8001dbc:	40011400 	.word	0x40011400
 8001dc0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <HAL_GPIO_Init+0x304>)
 8001dc6:	68da      	ldr	r2, [r3, #12]
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	4909      	ldr	r1, [pc, #36]	; (8001df4 <HAL_GPIO_Init+0x304>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	fa22 f303 	lsr.w	r3, r2, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f47f ae8e 	bne.w	8001b04 <HAL_GPIO_Init+0x14>
  }
}
 8001de8:	bf00      	nop
 8001dea:	bf00      	nop
 8001dec:	372c      	adds	r7, #44	; 0x2c
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr
 8001df4:	40010400 	.word	0x40010400

08001df8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	807b      	strh	r3, [r7, #2]
 8001e04:	4613      	mov	r3, r2
 8001e06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e08:	787b      	ldrb	r3, [r7, #1]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e0e:	887a      	ldrh	r2, [r7, #2]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e14:	e003      	b.n	8001e1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e16:	887b      	ldrh	r3, [r7, #2]
 8001e18:	041a      	lsls	r2, r3, #16
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	611a      	str	r2, [r3, #16]
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr

08001e28 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e3a:	887a      	ldrh	r2, [r7, #2]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	041a      	lsls	r2, r3, #16
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	43d9      	mvns	r1, r3
 8001e46:	887b      	ldrh	r3, [r7, #2]
 8001e48:	400b      	ands	r3, r1
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	611a      	str	r2, [r3, #16]
}
 8001e50:	bf00      	nop
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc80      	pop	{r7}
 8001e58:	4770      	bx	lr
	...

08001e5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e272      	b.n	8002354 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 8087 	beq.w	8001f8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e7c:	4b92      	ldr	r3, [pc, #584]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 030c 	and.w	r3, r3, #12
 8001e84:	2b04      	cmp	r3, #4
 8001e86:	d00c      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e88:	4b8f      	ldr	r3, [pc, #572]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 030c 	and.w	r3, r3, #12
 8001e90:	2b08      	cmp	r3, #8
 8001e92:	d112      	bne.n	8001eba <HAL_RCC_OscConfig+0x5e>
 8001e94:	4b8c      	ldr	r3, [pc, #560]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea0:	d10b      	bne.n	8001eba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea2:	4b89      	ldr	r3, [pc, #548]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d06c      	beq.n	8001f88 <HAL_RCC_OscConfig+0x12c>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d168      	bne.n	8001f88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e24c      	b.n	8002354 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec2:	d106      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x76>
 8001ec4:	4b80      	ldr	r3, [pc, #512]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a7f      	ldr	r2, [pc, #508]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001eca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ece:	6013      	str	r3, [r2, #0]
 8001ed0:	e02e      	b.n	8001f30 <HAL_RCC_OscConfig+0xd4>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10c      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x98>
 8001eda:	4b7b      	ldr	r3, [pc, #492]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a7a      	ldr	r2, [pc, #488]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	4b78      	ldr	r3, [pc, #480]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a77      	ldr	r2, [pc, #476]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	e01d      	b.n	8001f30 <HAL_RCC_OscConfig+0xd4>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001efc:	d10c      	bne.n	8001f18 <HAL_RCC_OscConfig+0xbc>
 8001efe:	4b72      	ldr	r3, [pc, #456]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a71      	ldr	r2, [pc, #452]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	4b6f      	ldr	r3, [pc, #444]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a6e      	ldr	r2, [pc, #440]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	e00b      	b.n	8001f30 <HAL_RCC_OscConfig+0xd4>
 8001f18:	4b6b      	ldr	r3, [pc, #428]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a6a      	ldr	r2, [pc, #424]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f22:	6013      	str	r3, [r2, #0]
 8001f24:	4b68      	ldr	r3, [pc, #416]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a67      	ldr	r2, [pc, #412]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001f2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d013      	beq.n	8001f60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f38:	f7fe fc3c 	bl	80007b4 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f40:	f7fe fc38 	bl	80007b4 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b64      	cmp	r3, #100	; 0x64
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e200      	b.n	8002354 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f52:	4b5d      	ldr	r3, [pc, #372]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f0      	beq.n	8001f40 <HAL_RCC_OscConfig+0xe4>
 8001f5e:	e014      	b.n	8001f8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f60:	f7fe fc28 	bl	80007b4 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f68:	f7fe fc24 	bl	80007b4 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b64      	cmp	r3, #100	; 0x64
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e1ec      	b.n	8002354 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7a:	4b53      	ldr	r3, [pc, #332]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f0      	bne.n	8001f68 <HAL_RCC_OscConfig+0x10c>
 8001f86:	e000      	b.n	8001f8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d063      	beq.n	800205e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f96:	4b4c      	ldr	r3, [pc, #304]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00b      	beq.n	8001fba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fa2:	4b49      	ldr	r3, [pc, #292]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f003 030c 	and.w	r3, r3, #12
 8001faa:	2b08      	cmp	r3, #8
 8001fac:	d11c      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x18c>
 8001fae:	4b46      	ldr	r3, [pc, #280]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d116      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fba:	4b43      	ldr	r3, [pc, #268]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d005      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x176>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d001      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e1c0      	b.n	8002354 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd2:	4b3d      	ldr	r3, [pc, #244]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	4939      	ldr	r1, [pc, #228]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe6:	e03a      	b.n	800205e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d020      	beq.n	8002032 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff0:	4b36      	ldr	r3, [pc, #216]	; (80020cc <HAL_RCC_OscConfig+0x270>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff6:	f7fe fbdd 	bl	80007b4 <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ffc:	e008      	b.n	8002010 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ffe:	f7fe fbd9 	bl	80007b4 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e1a1      	b.n	8002354 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002010:	4b2d      	ldr	r3, [pc, #180]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0f0      	beq.n	8001ffe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800201c:	4b2a      	ldr	r3, [pc, #168]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	695b      	ldr	r3, [r3, #20]
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4927      	ldr	r1, [pc, #156]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 800202c:	4313      	orrs	r3, r2
 800202e:	600b      	str	r3, [r1, #0]
 8002030:	e015      	b.n	800205e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002032:	4b26      	ldr	r3, [pc, #152]	; (80020cc <HAL_RCC_OscConfig+0x270>)
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002038:	f7fe fbbc 	bl	80007b4 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002040:	f7fe fbb8 	bl	80007b4 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e180      	b.n	8002354 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002052:	4b1d      	ldr	r3, [pc, #116]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f0      	bne.n	8002040 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d03a      	beq.n	80020e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d019      	beq.n	80020a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002072:	4b17      	ldr	r3, [pc, #92]	; (80020d0 <HAL_RCC_OscConfig+0x274>)
 8002074:	2201      	movs	r2, #1
 8002076:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002078:	f7fe fb9c 	bl	80007b4 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002080:	f7fe fb98 	bl	80007b4 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e160      	b.n	8002354 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002092:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8002094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0f0      	beq.n	8002080 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800209e:	2001      	movs	r0, #1
 80020a0:	f000 faa6 	bl	80025f0 <RCC_Delay>
 80020a4:	e01c      	b.n	80020e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020a6:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <HAL_RCC_OscConfig+0x274>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ac:	f7fe fb82 	bl	80007b4 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b2:	e00f      	b.n	80020d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020b4:	f7fe fb7e 	bl	80007b4 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d908      	bls.n	80020d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e146      	b.n	8002354 <HAL_RCC_OscConfig+0x4f8>
 80020c6:	bf00      	nop
 80020c8:	40021000 	.word	0x40021000
 80020cc:	42420000 	.word	0x42420000
 80020d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d4:	4b92      	ldr	r3, [pc, #584]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1e9      	bne.n	80020b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 80a6 	beq.w	800223a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ee:	2300      	movs	r3, #0
 80020f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020f2:	4b8b      	ldr	r3, [pc, #556]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10d      	bne.n	800211a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020fe:	4b88      	ldr	r3, [pc, #544]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	4a87      	ldr	r2, [pc, #540]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 8002104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002108:	61d3      	str	r3, [r2, #28]
 800210a:	4b85      	ldr	r3, [pc, #532]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002112:	60bb      	str	r3, [r7, #8]
 8002114:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002116:	2301      	movs	r3, #1
 8002118:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211a:	4b82      	ldr	r3, [pc, #520]	; (8002324 <HAL_RCC_OscConfig+0x4c8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002122:	2b00      	cmp	r3, #0
 8002124:	d118      	bne.n	8002158 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002126:	4b7f      	ldr	r3, [pc, #508]	; (8002324 <HAL_RCC_OscConfig+0x4c8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a7e      	ldr	r2, [pc, #504]	; (8002324 <HAL_RCC_OscConfig+0x4c8>)
 800212c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002130:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002132:	f7fe fb3f 	bl	80007b4 <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800213a:	f7fe fb3b 	bl	80007b4 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b64      	cmp	r3, #100	; 0x64
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e103      	b.n	8002354 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800214c:	4b75      	ldr	r3, [pc, #468]	; (8002324 <HAL_RCC_OscConfig+0x4c8>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0f0      	beq.n	800213a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d106      	bne.n	800216e <HAL_RCC_OscConfig+0x312>
 8002160:	4b6f      	ldr	r3, [pc, #444]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	4a6e      	ldr	r2, [pc, #440]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 8002166:	f043 0301 	orr.w	r3, r3, #1
 800216a:	6213      	str	r3, [r2, #32]
 800216c:	e02d      	b.n	80021ca <HAL_RCC_OscConfig+0x36e>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10c      	bne.n	8002190 <HAL_RCC_OscConfig+0x334>
 8002176:	4b6a      	ldr	r3, [pc, #424]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	4a69      	ldr	r2, [pc, #420]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 800217c:	f023 0301 	bic.w	r3, r3, #1
 8002180:	6213      	str	r3, [r2, #32]
 8002182:	4b67      	ldr	r3, [pc, #412]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	4a66      	ldr	r2, [pc, #408]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 8002188:	f023 0304 	bic.w	r3, r3, #4
 800218c:	6213      	str	r3, [r2, #32]
 800218e:	e01c      	b.n	80021ca <HAL_RCC_OscConfig+0x36e>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	2b05      	cmp	r3, #5
 8002196:	d10c      	bne.n	80021b2 <HAL_RCC_OscConfig+0x356>
 8002198:	4b61      	ldr	r3, [pc, #388]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	4a60      	ldr	r2, [pc, #384]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 800219e:	f043 0304 	orr.w	r3, r3, #4
 80021a2:	6213      	str	r3, [r2, #32]
 80021a4:	4b5e      	ldr	r3, [pc, #376]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	4a5d      	ldr	r2, [pc, #372]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 80021aa:	f043 0301 	orr.w	r3, r3, #1
 80021ae:	6213      	str	r3, [r2, #32]
 80021b0:	e00b      	b.n	80021ca <HAL_RCC_OscConfig+0x36e>
 80021b2:	4b5b      	ldr	r3, [pc, #364]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	4a5a      	ldr	r2, [pc, #360]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 80021b8:	f023 0301 	bic.w	r3, r3, #1
 80021bc:	6213      	str	r3, [r2, #32]
 80021be:	4b58      	ldr	r3, [pc, #352]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	4a57      	ldr	r2, [pc, #348]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 80021c4:	f023 0304 	bic.w	r3, r3, #4
 80021c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d015      	beq.n	80021fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d2:	f7fe faef 	bl	80007b4 <HAL_GetTick>
 80021d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d8:	e00a      	b.n	80021f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021da:	f7fe faeb 	bl	80007b4 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e0b1      	b.n	8002354 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f0:	4b4b      	ldr	r3, [pc, #300]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0ee      	beq.n	80021da <HAL_RCC_OscConfig+0x37e>
 80021fc:	e014      	b.n	8002228 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fe:	f7fe fad9 	bl	80007b4 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002204:	e00a      	b.n	800221c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002206:	f7fe fad5 	bl	80007b4 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	f241 3288 	movw	r2, #5000	; 0x1388
 8002214:	4293      	cmp	r3, r2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e09b      	b.n	8002354 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800221c:	4b40      	ldr	r3, [pc, #256]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1ee      	bne.n	8002206 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002228:	7dfb      	ldrb	r3, [r7, #23]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d105      	bne.n	800223a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800222e:	4b3c      	ldr	r3, [pc, #240]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	4a3b      	ldr	r2, [pc, #236]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 8002234:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002238:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 8087 	beq.w	8002352 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002244:	4b36      	ldr	r3, [pc, #216]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 030c 	and.w	r3, r3, #12
 800224c:	2b08      	cmp	r3, #8
 800224e:	d061      	beq.n	8002314 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69db      	ldr	r3, [r3, #28]
 8002254:	2b02      	cmp	r3, #2
 8002256:	d146      	bne.n	80022e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002258:	4b33      	ldr	r3, [pc, #204]	; (8002328 <HAL_RCC_OscConfig+0x4cc>)
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225e:	f7fe faa9 	bl	80007b4 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002266:	f7fe faa5 	bl	80007b4 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e06d      	b.n	8002354 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002278:	4b29      	ldr	r3, [pc, #164]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1f0      	bne.n	8002266 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800228c:	d108      	bne.n	80022a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800228e:	4b24      	ldr	r3, [pc, #144]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	4921      	ldr	r1, [pc, #132]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 800229c:	4313      	orrs	r3, r2
 800229e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022a0:	4b1f      	ldr	r3, [pc, #124]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a19      	ldr	r1, [r3, #32]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b0:	430b      	orrs	r3, r1
 80022b2:	491b      	ldr	r1, [pc, #108]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022b8:	4b1b      	ldr	r3, [pc, #108]	; (8002328 <HAL_RCC_OscConfig+0x4cc>)
 80022ba:	2201      	movs	r2, #1
 80022bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022be:	f7fe fa79 	bl	80007b4 <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022c4:	e008      	b.n	80022d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c6:	f7fe fa75 	bl	80007b4 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e03d      	b.n	8002354 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022d8:	4b11      	ldr	r3, [pc, #68]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0f0      	beq.n	80022c6 <HAL_RCC_OscConfig+0x46a>
 80022e4:	e035      	b.n	8002352 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e6:	4b10      	ldr	r3, [pc, #64]	; (8002328 <HAL_RCC_OscConfig+0x4cc>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ec:	f7fe fa62 	bl	80007b4 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f4:	f7fe fa5e 	bl	80007b4 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e026      	b.n	8002354 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_RCC_OscConfig+0x4c4>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f0      	bne.n	80022f4 <HAL_RCC_OscConfig+0x498>
 8002312:	e01e      	b.n	8002352 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d107      	bne.n	800232c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e019      	b.n	8002354 <HAL_RCC_OscConfig+0x4f8>
 8002320:	40021000 	.word	0x40021000
 8002324:	40007000 	.word	0x40007000
 8002328:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800232c:	4b0b      	ldr	r3, [pc, #44]	; (800235c <HAL_RCC_OscConfig+0x500>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	429a      	cmp	r2, r3
 800233e:	d106      	bne.n	800234e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800234a:	429a      	cmp	r2, r3
 800234c:	d001      	beq.n	8002352 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40021000 	.word	0x40021000

08002360 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e0d0      	b.n	8002516 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002374:	4b6a      	ldr	r3, [pc, #424]	; (8002520 <HAL_RCC_ClockConfig+0x1c0>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	429a      	cmp	r2, r3
 8002380:	d910      	bls.n	80023a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002382:	4b67      	ldr	r3, [pc, #412]	; (8002520 <HAL_RCC_ClockConfig+0x1c0>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f023 0207 	bic.w	r2, r3, #7
 800238a:	4965      	ldr	r1, [pc, #404]	; (8002520 <HAL_RCC_ClockConfig+0x1c0>)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	4313      	orrs	r3, r2
 8002390:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002392:	4b63      	ldr	r3, [pc, #396]	; (8002520 <HAL_RCC_ClockConfig+0x1c0>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	429a      	cmp	r2, r3
 800239e:	d001      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e0b8      	b.n	8002516 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d020      	beq.n	80023f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d005      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023bc:	4b59      	ldr	r3, [pc, #356]	; (8002524 <HAL_RCC_ClockConfig+0x1c4>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	4a58      	ldr	r2, [pc, #352]	; (8002524 <HAL_RCC_ClockConfig+0x1c4>)
 80023c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0308 	and.w	r3, r3, #8
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d005      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023d4:	4b53      	ldr	r3, [pc, #332]	; (8002524 <HAL_RCC_ClockConfig+0x1c4>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	4a52      	ldr	r2, [pc, #328]	; (8002524 <HAL_RCC_ClockConfig+0x1c4>)
 80023da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e0:	4b50      	ldr	r3, [pc, #320]	; (8002524 <HAL_RCC_ClockConfig+0x1c4>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	494d      	ldr	r1, [pc, #308]	; (8002524 <HAL_RCC_ClockConfig+0x1c4>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d040      	beq.n	8002480 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d107      	bne.n	8002416 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002406:	4b47      	ldr	r3, [pc, #284]	; (8002524 <HAL_RCC_ClockConfig+0x1c4>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d115      	bne.n	800243e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e07f      	b.n	8002516 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b02      	cmp	r3, #2
 800241c:	d107      	bne.n	800242e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800241e:	4b41      	ldr	r3, [pc, #260]	; (8002524 <HAL_RCC_ClockConfig+0x1c4>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d109      	bne.n	800243e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e073      	b.n	8002516 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800242e:	4b3d      	ldr	r3, [pc, #244]	; (8002524 <HAL_RCC_ClockConfig+0x1c4>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e06b      	b.n	8002516 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800243e:	4b39      	ldr	r3, [pc, #228]	; (8002524 <HAL_RCC_ClockConfig+0x1c4>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f023 0203 	bic.w	r2, r3, #3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	4936      	ldr	r1, [pc, #216]	; (8002524 <HAL_RCC_ClockConfig+0x1c4>)
 800244c:	4313      	orrs	r3, r2
 800244e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002450:	f7fe f9b0 	bl	80007b4 <HAL_GetTick>
 8002454:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002456:	e00a      	b.n	800246e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002458:	f7fe f9ac 	bl	80007b4 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	f241 3288 	movw	r2, #5000	; 0x1388
 8002466:	4293      	cmp	r3, r2
 8002468:	d901      	bls.n	800246e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e053      	b.n	8002516 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246e:	4b2d      	ldr	r3, [pc, #180]	; (8002524 <HAL_RCC_ClockConfig+0x1c4>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f003 020c 	and.w	r2, r3, #12
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	429a      	cmp	r2, r3
 800247e:	d1eb      	bne.n	8002458 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002480:	4b27      	ldr	r3, [pc, #156]	; (8002520 <HAL_RCC_ClockConfig+0x1c0>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d210      	bcs.n	80024b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248e:	4b24      	ldr	r3, [pc, #144]	; (8002520 <HAL_RCC_ClockConfig+0x1c0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f023 0207 	bic.w	r2, r3, #7
 8002496:	4922      	ldr	r1, [pc, #136]	; (8002520 <HAL_RCC_ClockConfig+0x1c0>)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800249e:	4b20      	ldr	r3, [pc, #128]	; (8002520 <HAL_RCC_ClockConfig+0x1c0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d001      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e032      	b.n	8002516 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d008      	beq.n	80024ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024bc:	4b19      	ldr	r3, [pc, #100]	; (8002524 <HAL_RCC_ClockConfig+0x1c4>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	4916      	ldr	r1, [pc, #88]	; (8002524 <HAL_RCC_ClockConfig+0x1c4>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0308 	and.w	r3, r3, #8
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d009      	beq.n	80024ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024da:	4b12      	ldr	r3, [pc, #72]	; (8002524 <HAL_RCC_ClockConfig+0x1c4>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	490e      	ldr	r1, [pc, #56]	; (8002524 <HAL_RCC_ClockConfig+0x1c4>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024ee:	f000 f821 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 80024f2:	4602      	mov	r2, r0
 80024f4:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <HAL_RCC_ClockConfig+0x1c4>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	091b      	lsrs	r3, r3, #4
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	490a      	ldr	r1, [pc, #40]	; (8002528 <HAL_RCC_ClockConfig+0x1c8>)
 8002500:	5ccb      	ldrb	r3, [r1, r3]
 8002502:	fa22 f303 	lsr.w	r3, r2, r3
 8002506:	4a09      	ldr	r2, [pc, #36]	; (800252c <HAL_RCC_ClockConfig+0x1cc>)
 8002508:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800250a:	4b09      	ldr	r3, [pc, #36]	; (8002530 <HAL_RCC_ClockConfig+0x1d0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe f90e 	bl	8000730 <HAL_InitTick>

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40022000 	.word	0x40022000
 8002524:	40021000 	.word	0x40021000
 8002528:	080030e8 	.word	0x080030e8
 800252c:	20000000 	.word	0x20000000
 8002530:	20000004 	.word	0x20000004

08002534 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002534:	b490      	push	{r4, r7}
 8002536:	b08a      	sub	sp, #40	; 0x28
 8002538:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800253a:	4b29      	ldr	r3, [pc, #164]	; (80025e0 <HAL_RCC_GetSysClockFreq+0xac>)
 800253c:	1d3c      	adds	r4, r7, #4
 800253e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002540:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002544:	f240 2301 	movw	r3, #513	; 0x201
 8002548:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800254a:	2300      	movs	r3, #0
 800254c:	61fb      	str	r3, [r7, #28]
 800254e:	2300      	movs	r3, #0
 8002550:	61bb      	str	r3, [r7, #24]
 8002552:	2300      	movs	r3, #0
 8002554:	627b      	str	r3, [r7, #36]	; 0x24
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800255a:	2300      	movs	r3, #0
 800255c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800255e:	4b21      	ldr	r3, [pc, #132]	; (80025e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	f003 030c 	and.w	r3, r3, #12
 800256a:	2b04      	cmp	r3, #4
 800256c:	d002      	beq.n	8002574 <HAL_RCC_GetSysClockFreq+0x40>
 800256e:	2b08      	cmp	r3, #8
 8002570:	d003      	beq.n	800257a <HAL_RCC_GetSysClockFreq+0x46>
 8002572:	e02b      	b.n	80025cc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002574:	4b1c      	ldr	r3, [pc, #112]	; (80025e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002576:	623b      	str	r3, [r7, #32]
      break;
 8002578:	e02b      	b.n	80025d2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	0c9b      	lsrs	r3, r3, #18
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	3328      	adds	r3, #40	; 0x28
 8002584:	443b      	add	r3, r7
 8002586:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800258a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d012      	beq.n	80025bc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002596:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	0c5b      	lsrs	r3, r3, #17
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	3328      	adds	r3, #40	; 0x28
 80025a2:	443b      	add	r3, r7
 80025a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80025a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	4a0e      	ldr	r2, [pc, #56]	; (80025e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025ae:	fb03 f202 	mul.w	r2, r3, r2
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24
 80025ba:	e004      	b.n	80025c6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	4a0b      	ldr	r2, [pc, #44]	; (80025ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80025c0:	fb02 f303 	mul.w	r3, r2, r3
 80025c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	623b      	str	r3, [r7, #32]
      break;
 80025ca:	e002      	b.n	80025d2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025cc:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025ce:	623b      	str	r3, [r7, #32]
      break;
 80025d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025d2:	6a3b      	ldr	r3, [r7, #32]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3728      	adds	r7, #40	; 0x28
 80025d8:	46bd      	mov	sp, r7
 80025da:	bc90      	pop	{r4, r7}
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	080030d8 	.word	0x080030d8
 80025e4:	40021000 	.word	0x40021000
 80025e8:	007a1200 	.word	0x007a1200
 80025ec:	003d0900 	.word	0x003d0900

080025f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025f8:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <RCC_Delay+0x34>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a0a      	ldr	r2, [pc, #40]	; (8002628 <RCC_Delay+0x38>)
 80025fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002602:	0a5b      	lsrs	r3, r3, #9
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	fb02 f303 	mul.w	r3, r2, r3
 800260a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800260c:	bf00      	nop
  }
  while (Delay --);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	1e5a      	subs	r2, r3, #1
 8002612:	60fa      	str	r2, [r7, #12]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1f9      	bne.n	800260c <RCC_Delay+0x1c>
}
 8002618:	bf00      	nop
 800261a:	bf00      	nop
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr
 8002624:	20000000 	.word	0x20000000
 8002628:	10624dd3 	.word	0x10624dd3

0800262c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	4613      	mov	r3, r2
 8002638:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b20      	cmp	r3, #32
 8002644:	d153      	bne.n	80026ee <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d002      	beq.n	8002652 <HAL_UART_Transmit_DMA+0x26>
 800264c:	88fb      	ldrh	r3, [r7, #6]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e04c      	b.n	80026f0 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800265c:	2b01      	cmp	r3, #1
 800265e:	d101      	bne.n	8002664 <HAL_UART_Transmit_DMA+0x38>
 8002660:	2302      	movs	r3, #2
 8002662:	e045      	b.n	80026f0 <HAL_UART_Transmit_DMA+0xc4>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	88fa      	ldrh	r2, [r7, #6]
 8002676:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	88fa      	ldrh	r2, [r7, #6]
 800267c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2221      	movs	r2, #33	; 0x21
 8002688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002690:	4a19      	ldr	r2, [pc, #100]	; (80026f8 <HAL_UART_Transmit_DMA+0xcc>)
 8002692:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002698:	4a18      	ldr	r2, [pc, #96]	; (80026fc <HAL_UART_Transmit_DMA+0xd0>)
 800269a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026a0:	4a17      	ldr	r2, [pc, #92]	; (8002700 <HAL_UART_Transmit_DMA+0xd4>)
 80026a2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026a8:	2200      	movs	r2, #0
 80026aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 80026ac:	f107 0308 	add.w	r3, r7, #8
 80026b0:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	6819      	ldr	r1, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	3304      	adds	r3, #4
 80026c0:	461a      	mov	r2, r3
 80026c2:	88fb      	ldrh	r3, [r7, #6]
 80026c4:	f7fe ffd1 	bl	800166a <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026d0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	695a      	ldr	r2, [r3, #20]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026e8:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80026ea:	2300      	movs	r3, #0
 80026ec:	e000      	b.n	80026f0 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80026ee:	2302      	movs	r3, #2
  }
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	08002b05 	.word	0x08002b05
 80026fc:	08002b57 	.word	0x08002b57
 8002700:	08002c3f 	.word	0x08002c3f

08002704 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	4613      	mov	r3, r2
 8002710:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b20      	cmp	r3, #32
 800271c:	d11d      	bne.n	800275a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d002      	beq.n	800272a <HAL_UART_Receive_DMA+0x26>
 8002724:	88fb      	ldrh	r3, [r7, #6]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e016      	b.n	800275c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002734:	2b01      	cmp	r3, #1
 8002736:	d101      	bne.n	800273c <HAL_UART_Receive_DMA+0x38>
 8002738:	2302      	movs	r3, #2
 800273a:	e00f      	b.n	800275c <HAL_UART_Receive_DMA+0x58>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800274a:	88fb      	ldrh	r3, [r7, #6]
 800274c:	461a      	mov	r2, r3
 800274e:	68b9      	ldr	r1, [r7, #8]
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f000 fabf 	bl	8002cd4 <UART_Start_Receive_DMA>
 8002756:	4603      	mov	r3, r0
 8002758:	e000      	b.n	800275c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800275a:	2302      	movs	r3, #2
  }
}
 800275c:	4618      	mov	r0, r3
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08a      	sub	sp, #40	; 0x28
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002784:	2300      	movs	r3, #0
 8002786:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10d      	bne.n	80027b6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	f003 0320 	and.w	r3, r3, #32
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d008      	beq.n	80027b6 <HAL_UART_IRQHandler+0x52>
 80027a4:	6a3b      	ldr	r3, [r7, #32]
 80027a6:	f003 0320 	and.w	r3, r3, #32
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 fbb0 	bl	8002f14 <UART_Receive_IT>
      return;
 80027b4:	e17b      	b.n	8002aae <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 80b1 	beq.w	8002920 <HAL_UART_IRQHandler+0x1bc>
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d105      	bne.n	80027d4 <HAL_UART_IRQHandler+0x70>
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 80a6 	beq.w	8002920 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00a      	beq.n	80027f4 <HAL_UART_IRQHandler+0x90>
 80027de:	6a3b      	ldr	r3, [r7, #32]
 80027e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d005      	beq.n	80027f4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	f043 0201 	orr.w	r2, r3, #1
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f6:	f003 0304 	and.w	r3, r3, #4
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00a      	beq.n	8002814 <HAL_UART_IRQHandler+0xb0>
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b00      	cmp	r3, #0
 8002806:	d005      	beq.n	8002814 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	f043 0202 	orr.w	r2, r3, #2
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00a      	beq.n	8002834 <HAL_UART_IRQHandler+0xd0>
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	f043 0204 	orr.w	r2, r3, #4
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00f      	beq.n	800285e <HAL_UART_IRQHandler+0xfa>
 800283e:	6a3b      	ldr	r3, [r7, #32]
 8002840:	f003 0320 	and.w	r3, r3, #32
 8002844:	2b00      	cmp	r3, #0
 8002846:	d104      	bne.n	8002852 <HAL_UART_IRQHandler+0xee>
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d005      	beq.n	800285e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	f043 0208 	orr.w	r2, r3, #8
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 811e 	beq.w	8002aa4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	f003 0320 	and.w	r3, r3, #32
 800286e:	2b00      	cmp	r3, #0
 8002870:	d007      	beq.n	8002882 <HAL_UART_IRQHandler+0x11e>
 8002872:	6a3b      	ldr	r3, [r7, #32]
 8002874:	f003 0320 	and.w	r3, r3, #32
 8002878:	2b00      	cmp	r3, #0
 800287a:	d002      	beq.n	8002882 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 fb49 	bl	8002f14 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800288c:	2b00      	cmp	r3, #0
 800288e:	bf14      	ite	ne
 8002890:	2301      	movne	r3, #1
 8002892:	2300      	moveq	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289c:	f003 0308 	and.w	r3, r3, #8
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d102      	bne.n	80028aa <HAL_UART_IRQHandler+0x146>
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d031      	beq.n	800290e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 fa8b 	bl	8002dc6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d023      	beq.n	8002906 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	695a      	ldr	r2, [r3, #20]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028cc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d013      	beq.n	80028fe <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028da:	4a76      	ldr	r2, [pc, #472]	; (8002ab4 <HAL_UART_IRQHandler+0x350>)
 80028dc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fe ff5a 	bl	800179c <HAL_DMA_Abort_IT>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d016      	beq.n	800291c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028f8:	4610      	mov	r0, r2
 80028fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028fc:	e00e      	b.n	800291c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f8ec 	bl	8002adc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002904:	e00a      	b.n	800291c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f8e8 	bl	8002adc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800290c:	e006      	b.n	800291c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f8e4 	bl	8002adc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800291a:	e0c3      	b.n	8002aa4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800291c:	bf00      	nop
    return;
 800291e:	e0c1      	b.n	8002aa4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002924:	2b01      	cmp	r3, #1
 8002926:	f040 80a1 	bne.w	8002a6c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	f003 0310 	and.w	r3, r3, #16
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 809b 	beq.w	8002a6c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	f003 0310 	and.w	r3, r3, #16
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 8095 	beq.w	8002a6c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002942:	2300      	movs	r3, #0
 8002944:	60fb      	str	r3, [r7, #12]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002962:	2b00      	cmp	r3, #0
 8002964:	d04e      	beq.n	8002a04 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002970:	8a3b      	ldrh	r3, [r7, #16]
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 8098 	beq.w	8002aa8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800297c:	8a3a      	ldrh	r2, [r7, #16]
 800297e:	429a      	cmp	r2, r3
 8002980:	f080 8092 	bcs.w	8002aa8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	8a3a      	ldrh	r2, [r7, #16]
 8002988:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	2b20      	cmp	r3, #32
 8002992:	d02b      	beq.n	80029ec <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029a2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	695a      	ldr	r2, [r3, #20]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0201 	bic.w	r2, r2, #1
 80029b2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695a      	ldr	r2, [r3, #20]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029c2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2220      	movs	r2, #32
 80029c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 0210 	bic.w	r2, r2, #16
 80029e0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fe fe9e 	bl	8001728 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	4619      	mov	r1, r3
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 f876 	bl	8002aee <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002a02:	e051      	b.n	8002aa8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d047      	beq.n	8002aac <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002a1c:	8a7b      	ldrh	r3, [r7, #18]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d044      	beq.n	8002aac <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68da      	ldr	r2, [r3, #12]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002a30:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	695a      	ldr	r2, [r3, #20]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 0201 	bic.w	r2, r2, #1
 8002a40:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2220      	movs	r2, #32
 8002a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0210 	bic.w	r2, r2, #16
 8002a5e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a60:	8a7b      	ldrh	r3, [r7, #18]
 8002a62:	4619      	mov	r1, r3
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 f842 	bl	8002aee <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002a6a:	e01f      	b.n	8002aac <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d008      	beq.n	8002a88 <HAL_UART_IRQHandler+0x324>
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f9e0 	bl	8002e46 <UART_Transmit_IT>
    return;
 8002a86:	e012      	b.n	8002aae <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00d      	beq.n	8002aae <HAL_UART_IRQHandler+0x34a>
 8002a92:	6a3b      	ldr	r3, [r7, #32]
 8002a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d008      	beq.n	8002aae <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 fa21 	bl	8002ee4 <UART_EndTransmit_IT>
    return;
 8002aa2:	e004      	b.n	8002aae <HAL_UART_IRQHandler+0x34a>
    return;
 8002aa4:	bf00      	nop
 8002aa6:	e002      	b.n	8002aae <HAL_UART_IRQHandler+0x34a>
      return;
 8002aa8:	bf00      	nop
 8002aaa:	e000      	b.n	8002aae <HAL_UART_IRQHandler+0x34a>
      return;
 8002aac:	bf00      	nop
  }
}
 8002aae:	3728      	adds	r7, #40	; 0x28
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	08002e1f 	.word	0x08002e1f

08002ab8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr

08002aca <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr

08002adc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr

08002aee <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
 8002af6:	460b      	mov	r3, r1
 8002af8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr

08002b04 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b10:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0320 	and.w	r3, r3, #32
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d113      	bne.n	8002b48 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695a      	ldr	r2, [r3, #20]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b34:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68da      	ldr	r2, [r3, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b44:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002b46:	e002      	b.n	8002b4e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f7fd fd9d 	bl	8000688 <HAL_UART_TxCpltCallback>
}
 8002b4e:	bf00      	nop
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b084      	sub	sp, #16
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f7ff ffa7 	bl	8002ab8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b6a:	bf00      	nop
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b084      	sub	sp, #16
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0320 	and.w	r3, r3, #32
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d12a      	bne.n	8002be4 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68da      	ldr	r2, [r3, #12]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ba2:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	695a      	ldr	r2, [r3, #20]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 0201 	bic.w	r2, r2, #1
 8002bb2:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	695a      	ldr	r2, [r3, #20]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bc2:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d107      	bne.n	8002be4 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68da      	ldr	r2, [r3, #12]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 0210 	bic.w	r2, r2, #16
 8002be2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d106      	bne.n	8002bfa <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f7ff ff7b 	bl	8002aee <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002bf8:	e002      	b.n	8002c00 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f7fd fd02 	bl	8000604 <HAL_UART_RxCpltCallback>
}
 8002c00:	bf00      	nop
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d108      	bne.n	8002c30 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c22:	085b      	lsrs	r3, r3, #1
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	4619      	mov	r1, r3
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f7ff ff60 	bl	8002aee <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002c2e:	e002      	b.n	8002c36 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f7ff ff4a 	bl	8002aca <HAL_UART_RxHalfCpltCallback>
}
 8002c36:	bf00      	nop
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b084      	sub	sp, #16
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002c46:	2300      	movs	r3, #0
 8002c48:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	bf14      	ite	ne
 8002c5e:	2301      	movne	r3, #1
 8002c60:	2300      	moveq	r3, #0
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b21      	cmp	r3, #33	; 0x21
 8002c70:	d108      	bne.n	8002c84 <UART_DMAError+0x46>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d005      	beq.n	8002c84 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002c7e:	68b8      	ldr	r0, [r7, #8]
 8002c80:	f000 f88c 	bl	8002d9c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	bf14      	ite	ne
 8002c92:	2301      	movne	r3, #1
 8002c94:	2300      	moveq	r3, #0
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b22      	cmp	r3, #34	; 0x22
 8002ca4:	d108      	bne.n	8002cb8 <UART_DMAError+0x7a>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d005      	beq.n	8002cb8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002cb2:	68b8      	ldr	r0, [r7, #8]
 8002cb4:	f000 f887 	bl	8002dc6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbc:	f043 0210 	orr.w	r2, r3, #16
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002cc4:	68b8      	ldr	r0, [r7, #8]
 8002cc6:	f7ff ff09 	bl	8002adc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002cca:	bf00      	nop
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
	...

08002cd4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	88fa      	ldrh	r2, [r7, #6]
 8002cec:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2222      	movs	r2, #34	; 0x22
 8002cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d00:	4a23      	ldr	r2, [pc, #140]	; (8002d90 <UART_Start_Receive_DMA+0xbc>)
 8002d02:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d08:	4a22      	ldr	r2, [pc, #136]	; (8002d94 <UART_Start_Receive_DMA+0xc0>)
 8002d0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d10:	4a21      	ldr	r2, [pc, #132]	; (8002d98 <UART_Start_Receive_DMA+0xc4>)
 8002d12:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d18:	2200      	movs	r2, #0
 8002d1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002d1c:	f107 0308 	add.w	r3, r7, #8
 8002d20:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	3304      	adds	r3, #4
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	88fb      	ldrh	r3, [r7, #6]
 8002d34:	f7fe fc99 	bl	800166a <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002d38:	2300      	movs	r3, #0
 8002d3a:	613b      	str	r3, [r7, #16]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	613b      	str	r3, [r7, #16]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	613b      	str	r3, [r7, #16]
 8002d4c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68da      	ldr	r2, [r3, #12]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d64:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	695a      	ldr	r2, [r3, #20]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f042 0201 	orr.w	r2, r2, #1
 8002d74:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	695a      	ldr	r2, [r3, #20]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d84:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	08002b73 	.word	0x08002b73
 8002d94:	08002c09 	.word	0x08002c09
 8002d98:	08002c3f 	.word	0x08002c3f

08002d9c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002db2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2220      	movs	r2, #32
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bc80      	pop	{r7}
 8002dc4:	4770      	bx	lr

08002dc6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68da      	ldr	r2, [r3, #12]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002ddc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	695a      	ldr	r2, [r3, #20]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0201 	bic.w	r2, r2, #1
 8002dec:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d107      	bne.n	8002e06 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68da      	ldr	r2, [r3, #12]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 0210 	bic.w	r2, r2, #16
 8002e04:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2220      	movs	r2, #32
 8002e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bc80      	pop	{r7}
 8002e1c:	4770      	bx	lr

08002e1e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b084      	sub	sp, #16
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f7ff fe4f 	bl	8002adc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e3e:	bf00      	nop
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b085      	sub	sp, #20
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b21      	cmp	r3, #33	; 0x21
 8002e58:	d13e      	bne.n	8002ed8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e62:	d114      	bne.n	8002e8e <UART_Transmit_IT+0x48>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d110      	bne.n	8002e8e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	881b      	ldrh	r3, [r3, #0]
 8002e76:	461a      	mov	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e80:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	1c9a      	adds	r2, r3, #2
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	621a      	str	r2, [r3, #32]
 8002e8c:	e008      	b.n	8002ea0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	1c59      	adds	r1, r3, #1
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6211      	str	r1, [r2, #32]
 8002e98:	781a      	ldrb	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	4619      	mov	r1, r3
 8002eae:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10f      	bne.n	8002ed4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ec2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68da      	ldr	r2, [r3, #12]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ed2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	e000      	b.n	8002eda <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002ed8:	2302      	movs	r3, #2
  }
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3714      	adds	r7, #20
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bc80      	pop	{r7}
 8002ee2:	4770      	bx	lr

08002ee4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68da      	ldr	r2, [r3, #12]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002efa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f7fd fbbf 	bl	8000688 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b22      	cmp	r3, #34	; 0x22
 8002f26:	f040 8099 	bne.w	800305c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f32:	d117      	bne.n	8002f64 <UART_Receive_IT+0x50>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d113      	bne.n	8002f64 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f44:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5c:	1c9a      	adds	r2, r3, #2
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	629a      	str	r2, [r3, #40]	; 0x28
 8002f62:	e026      	b.n	8002fb2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f68:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f76:	d007      	beq.n	8002f88 <UART_Receive_IT+0x74>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10a      	bne.n	8002f96 <UART_Receive_IT+0x82>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d106      	bne.n	8002f96 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	701a      	strb	r2, [r3, #0]
 8002f94:	e008      	b.n	8002fa8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fac:	1c5a      	adds	r2, r3, #1
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d148      	bne.n	8003058 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 0220 	bic.w	r2, r2, #32
 8002fd4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68da      	ldr	r2, [r3, #12]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fe4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	695a      	ldr	r2, [r3, #20]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 0201 	bic.w	r2, r2, #1
 8002ff4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003002:	2b01      	cmp	r3, #1
 8003004:	d123      	bne.n	800304e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68da      	ldr	r2, [r3, #12]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 0210 	bic.w	r2, r2, #16
 800301a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0310 	and.w	r3, r3, #16
 8003026:	2b10      	cmp	r3, #16
 8003028:	d10a      	bne.n	8003040 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	60fb      	str	r3, [r7, #12]
 800303e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003044:	4619      	mov	r1, r3
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7ff fd51 	bl	8002aee <HAL_UARTEx_RxEventCallback>
 800304c:	e002      	b.n	8003054 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7fd fad8 	bl	8000604 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003054:	2300      	movs	r3, #0
 8003056:	e002      	b.n	800305e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003058:	2300      	movs	r3, #0
 800305a:	e000      	b.n	800305e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800305c:	2302      	movs	r3, #2
  }
}
 800305e:	4618      	mov	r0, r3
 8003060:	3718      	adds	r7, #24
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
	...

08003068 <__libc_init_array>:
 8003068:	b570      	push	{r4, r5, r6, lr}
 800306a:	2600      	movs	r6, #0
 800306c:	4d0c      	ldr	r5, [pc, #48]	; (80030a0 <__libc_init_array+0x38>)
 800306e:	4c0d      	ldr	r4, [pc, #52]	; (80030a4 <__libc_init_array+0x3c>)
 8003070:	1b64      	subs	r4, r4, r5
 8003072:	10a4      	asrs	r4, r4, #2
 8003074:	42a6      	cmp	r6, r4
 8003076:	d109      	bne.n	800308c <__libc_init_array+0x24>
 8003078:	f000 f822 	bl	80030c0 <_init>
 800307c:	2600      	movs	r6, #0
 800307e:	4d0a      	ldr	r5, [pc, #40]	; (80030a8 <__libc_init_array+0x40>)
 8003080:	4c0a      	ldr	r4, [pc, #40]	; (80030ac <__libc_init_array+0x44>)
 8003082:	1b64      	subs	r4, r4, r5
 8003084:	10a4      	asrs	r4, r4, #2
 8003086:	42a6      	cmp	r6, r4
 8003088:	d105      	bne.n	8003096 <__libc_init_array+0x2e>
 800308a:	bd70      	pop	{r4, r5, r6, pc}
 800308c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003090:	4798      	blx	r3
 8003092:	3601      	adds	r6, #1
 8003094:	e7ee      	b.n	8003074 <__libc_init_array+0xc>
 8003096:	f855 3b04 	ldr.w	r3, [r5], #4
 800309a:	4798      	blx	r3
 800309c:	3601      	adds	r6, #1
 800309e:	e7f2      	b.n	8003086 <__libc_init_array+0x1e>
 80030a0:	080030f8 	.word	0x080030f8
 80030a4:	080030f8 	.word	0x080030f8
 80030a8:	080030f8 	.word	0x080030f8
 80030ac:	080030fc 	.word	0x080030fc

080030b0 <memset>:
 80030b0:	4603      	mov	r3, r0
 80030b2:	4402      	add	r2, r0
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d100      	bne.n	80030ba <memset+0xa>
 80030b8:	4770      	bx	lr
 80030ba:	f803 1b01 	strb.w	r1, [r3], #1
 80030be:	e7f9      	b.n	80030b4 <memset+0x4>

080030c0 <_init>:
 80030c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030c2:	bf00      	nop
 80030c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030c6:	bc08      	pop	{r3}
 80030c8:	469e      	mov	lr, r3
 80030ca:	4770      	bx	lr

080030cc <_fini>:
 80030cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ce:	bf00      	nop
 80030d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030d2:	bc08      	pop	{r3}
 80030d4:	469e      	mov	lr, r3
 80030d6:	4770      	bx	lr
